{"version":3,"file":"static/js/main.61adf4c8.js","mappings":"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","sources":["assets/files|sync|/^/.//.*$","assets/images|sync|/^/.//.*$","src/components/styling/typography/ResFont.ts","src/components/containers/VStack.tsx","src/data/experience/ExperiencePeriod.ts","src/data/Download.ts","src/data/Link.ts","src/data/experience/Experience.ts","src/data/experience/Experiences.ts","src/language/errors/UnreachableCaseError.ts","src/language/errors/AssertionError.ts","src/language/assertions/Assert.ts","src/components/styling/typography/ResFontWeight.ts","src/components/styling/typography/ResFontFamilyConfig.ts","src/components/styling/typography/ResFontFamily.ts","src/components/base/ResText/ResText.tsx","src/components/containers/HStack.tsx","src/state/environment/types/OS.ts","src/state/environment/types/ScreenType.ts","src/state/environment/types/ColorScheme.ts","src/state/environment/types/ResScreenOrientation.ts","src/state/environment/Environment.ts","src/components/styling/color/ResColor.ts","src/components/styling/ResColors.ts","src/components/styling/typography/ResTypographyConfig.ts","src/components/styling/ResTypography.ts","src/components/custom/YearHeader.tsx","src/components/styling/ResDimensions.ts","src/components/containers/FlatContainer.tsx","src/components/base/ResHyperlink/ResHyperlink.tsx","src/components/base/ResChip/ResChip.tsx","src/components/base/ResButton/ResSmallButton.tsx","src/components/custom/ExperienceCard.tsx","src/state/publishers/impl/ResValuePublisher.ts","src/state/publishers/types/ActiveSection.ts","src/state/publishers/StateManager.ts","src/components/custom/ExperienceSection.tsx","src/components/base/ResImage/ResImageScale.ts","src/components/base/ResImage/ResImage.tsx","src/components/custom/Header.tsx","src/components/base/ResIcon/ResIcon.tsx","src/components/base/ResIconButton/ResIconButton.tsx","src/components/base/ResIconButtonLabelled/ResIconButtonLabelled.tsx","src/components/custom/SplashIntro.tsx","src/components/base/ResButton/ResButton.tsx","src/components/custom/SplashButton.tsx","src/components/custom/Splash.tsx","src/components/custom/BasicCard.tsx","src/components/custom/Education.tsx","src/components/custom/Skills.tsx","src/components/MainScreen.tsx","src/data/experience/ExperiencePeriods.ts","App.tsx","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["var map = {\n\t\"./academic_transcript_unofficial.pdf\": 5637,\n\t\"./cpd_supporting_document_cerulean_labs.pdf\": 5346,\n\t\"./user_guide_teach_me_talkback.pdf\": 6294\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 5149;","var map = {\n\t\"./behance_black.png\": 8686,\n\t\"./behance_white.png\": 5719,\n\t\"./profile_picture.png\": 7804,\n\t\"./profile_picture_no_background.png\": 9276\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 3598;","\nexport enum ResFont {\n    poppinsMedium = 'Poppins-Medium',\n    poppinsSemiBold = 'Poppins-SemiBold',\n    poppinsBold = 'Poppins-Bold',\n    poppinsMediumItalic = 'Poppins-MediumItalic',\n    poppinsSemiBoldItalic = 'Poppins-SemiBoldItalic',\n    poppinsBoldItalic = 'Poppins-BoldItalic',\n    circularMedium = 'CircularStd-Medium',\n    circularBold = 'CircularStd-Bold',\n    circularBlack = 'CircularStd-Black',\n    circularMediumItalic = 'CircularStd-MediumItalic',\n    circularBoldItalic = 'CircularStd-BoldItalic',\n    circularBlackItalic = 'CircularStd-BlackItalic',\n    plexMonoMedium = 'IBMPlexMono-Medium',\n    plexMonoSemiBold = 'IBMPlexMono-SemiBold',\n    plexMonoBold = 'IBMPlexMono-Bold',\n    plexMonoMediumItalic = 'IBMPlexMono-MediumItalic',\n    plexMonoSemiBoldItalic = 'IBMPlexMono-SemiBoldItalic',\n    plexMonoBoldItalic = 'IBMPlexMono-BoldItalic',\n    gilroyExtraBold = 'Gilroy-ExtraBold',\n}","import React, { version } from \"react\";\nimport { View, StyleSheet, ViewStyle } from \"react-native\";\nimport PropTypes from \"prop-types\";\n\ninterface Props {\n    children;\n    spacing?: number;\n    horizontalSpacing?: number;\n    onLayout?: (event: any) => void;\n    style?: ViewStyle;\n}\n\nconst VStack: React.FC<Props> = ({ \n    children, \n    spacing = 0,\n    horizontalSpacing = null,\n    onLayout,\n    style, \n}) => {\n    return (\n        <View\n            onLayout={onLayout}\n            style={[\n                styles.container, \n                { columnGap: horizontalSpacing == null ? spacing : horizontalSpacing, rowGap: spacing }, \n                style,\n            ]}\n        >\n            {children}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'column', \n        flexWrap: 'wrap',\n    }\n});\n\nVStack.propTypes = {\n    children: PropTypes.node.isRequired,\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    spacing: PropTypes.number,\n};\n\nVStack.defaultProps = {\n    style: {},\n    spacing: 0,\n};\n\nexport default VStack;\n","import Experience from \"./Experience\";\n\nclass ExperiencePeriod {\n\n    constructor(\n        public readonly label: number | \"Active\",\n        public readonly experiences: Experience[]\n    ) { }\n\n}\n\nexport default ExperiencePeriod;","\nclass Download {\n\n    constructor(\n        public readonly label: string,\n        public readonly fileName: string,\n    ) { }\n\n}\n\nexport default Download;","\nclass Link {\n\n    constructor(\n        public readonly label: string,\n        public readonly shownURL: string,\n        public readonly url: string,\n    ) { }\n\n}\n\nexport default Link;","import Download from \"../Download\";\nimport Link from \"../Link\";\n\nclass Experience {\n\n    public get subscriptText(): string {\n        return this.projectType + \" • \" + this.duration;\n    }\n\n    constructor(\n        public readonly name: string,\n        public readonly section: number | \"Active\",\n        public readonly projectType: string,\n        public readonly duration: string,\n        public readonly description: string,\n        public readonly links: Link[],\n        public readonly files: Download[],\n        public readonly tags: string[],\n    ) { }\n\n}\n\nexport default Experience;","import Download from \"../Download\";\nimport Link from \"../Link\";\nimport Experience from \"./Experience\";\n\nexport const Experiences: Experience[] = [\n    new Experience(\n        \"Yonder\",\n        \"Active\",\n        \"Personal Project\",\n        \"2021 - Present\",\n        \"An iOS rouge-like rpg. Includes enemies and bosses to fight, npcs to meet, and loot such as armour, accessories, weapons, and potions to collect.\",\n        [\n            new Link(\"GitHub\", \"GitHub.com/Andre-Pham/Yonder\", \"https://github.com/Andre-Pham/yonder\")\n        ],\n        [],\n        [\n            \"Swift\", \"SwiftUI\", \"MVVM\", \"Combine\", \"Serialisation\", \"Localisation\", \"Unit Tests\"\n        ]\n    ),\n\n    new Experience(\n        \"Cerulean Labs\",\n        \"Active\",\n        \"Paid Positon\",\n        \"2021 - Present\",\n        \"As an iOS developer at Cerulean Labs, I've worked on all areas of the iPad Spaces app including the UI, rendering, feature development, and more. My CPD supporting document (linked below) provides are more thorough look at my contributions.\",\n        [\n            new Link(\"Spaces\", \"SpacesApp.io\", \"https://www.spacesapp.io/\"),\n            new Link(\"What is CPD?\", \"(Monash.edu Link)\", \"https://www.monash.edu/engineering/current-students/professional-development/continuous-professional-development\"),\n        ],\n        [\n            new Download(\"CPD Supporting Document\", \"cpd_supporting_document_cerulean_labs.pdf\"),\n        ],\n        [\n            \"Swift\", \"SwiftUI\", \"UIKit\", \"Core Graphics\", \"SceneKit\", \"Realm\", \"Unit Tests\", \"Localisation\"\n        ]\n    ),\n\n    new Experience(\n        \"SwiftSerialization\",\n        2023,\n        \"Personal Project\",\n        \"2023\",\n        \"A Swift package used for serialising and restoring Swift objects. Supports serialising, persisting, reading and restoring Swift objects. Provides legacy support.\",\n        [\n            new Link(\"GitHub\", \"GitHub.com/Andre-Pham/SwiftSerialization\", \"https://github.com/Andre-Pham/SwiftSerialization\")\n        ],\n        [],\n        [\n            \"Swift\", \"SQLite3\", \"Unit Tests\"\n        ]\n    ),\n\n    new Experience(\n        \"Fingerspell\",\n        \"Active\",\n        \"Uni Individual Project\",\n        \"2023 - Present\",\n        \"An iOS app that can convert a text prompt into an animated, interactive 3D model performing the prompt in Auslan fingerspelling, as well as the recognition and translation of fingerspelling performed by the user through their camera back into text.\",\n        [\n            new Link(\"GitHub\", \"GitHub.com/Andre-Pham/SpellApp\", \"https://github.com/Andre-Pham/SpellApp\")\n        ],\n        [],\n        [\n            \"Swift\", \"SwiftUI\", \"UIKit\", \"MVC\", \"SceneKit\", \"Create ML\", \"Vision\", \"AVFoundation\"\n        ]\n    ),\n\n    new Experience(\n        \"Teach Me Talkback\",\n        2022,\n        \"Uni Team Project\",\n        \"2022\",\n        \"An Android app with the purpose of teaching visually impaired uses how to use the Google screen reader Talkback. It uses lessons to teach the user gestures and navigation, and incorporates a 'sandbox mode' and 'game mode'.\",\n        [\n            new Link(\"GitHub\", \"GitHub.com/TalkbackTutorial/Application\", \"https://github.com/TalkbackTutorial/Application\")\n        ],\n        [\n            new Download(\"Teach Me Talkback User Guide\", \"user_guide_teach_me_talkback.pdf\")\n        ],\n        [\n            \"Kotlin\", \"XML Layouts\", \"Room\", \"Shared Preferences\", \"TextToSpeech\"\n        ]\n    ),\n\n    new Experience(\n        \"Portfolio\",\n        2021,\n        \"Uni Inidividual Project\",\n        \"2021\",\n        \"An iOS app that tracks an investment portfolio, such as stocks, cryptocurrencies, ETFs, etc. Allows you to see the performance of financial assets, create watchlists, and create a portfolio with insights on performance and return.\",\n        [\n            new Link(\"GitHub\", \"GitHub.com/Andre-Pham/Portfolio\", \"https://github.com/Andre-Pham/Portfolio\")\n        ],\n        [],\n        [\n            \"Swift\", \"UIKit\", \"MVC\", \"Core Data\", \"UNUserNotificationCenter\"\n        ]\n    ),\n\n    new Experience(\n        \"Intake\",\n        \"Active\",\n        \"Uni Team Project\",\n        \"2023 - Present\",\n        \"A multi-platform mental heatth triage app. Allows for nurses to triage patients, view and append to patient history, and view other triage cases. Allows admins to manage accounts and export patient data, and allows nurse leaders to manage shift turnover and manage patient allocation. Has account login, live data, and supports mobile, tablet, and web.\",\n        [\n            new Link(\"GitHub\", \"[Unavailable until publication made]\", \"https://github.com/FIT4002-TEAM9/Leaf\")\n        ],\n        [],\n        [\n            \"React Native Expo\", \"Typescript\", \"Redux\", \"MongoDB\"\n        ]\n    ),\n\n    new Experience(\n        \"Information Visualiser\",\n        2021,\n        \"Personal Project\",\n        \"2020 - 2021\",\n        \"A self-made QR code program that can turn text into visual pattern, and back again. Allows the creation and saving of a 'VISREP', as well as the recognition of them via image file or live video steam.\",\n        [\n            new Link(\"GitHub\", \"GitHub.com/Andre-Pham/Information-Visualiser\", \"https://github.com/Andre-Pham/Information-Visualiser\")\n        ],\n        [],\n        [\n            \"Python\", \"Tkinter\", \"cv2\", \"NumPy\", \"PIL\"\n        ]\n    ),\n\n    new Experience(\n        \"Dynamic Tic-Tac-Toe\",\n        2021,\n        \"Personal Project\",\n        \"2021\",\n        \"A Tic-tac-toe game in which the computer plays the user and either draws or wins. The user decides how many columns, rows, and how many in a row to win, though processing is limited to a board with 20 spaces. Implements lexicographic permutation for computer decisions.\",\n        [\n            new Link(\"GitHub\", \"GitHub.com/Andre-Pham/Dynamic-Tic-Tac-Toe\", \"https://github.com/Andre-Pham/Dynamic-Tic-Tac-Toe\")\n        ],\n        [],\n        [\n            \"Python\", \"Tkinter\"\n        ]\n    ),\n\n    new Experience(\n        \"Vision\",\n        \"Active\",\n        \"Paid Positon\",\n        \"2023 - Present\",\n        \"In progress. More to come...\",\n        [\n            new Link(\"GitHub\", \"GitHub.com/Andre-Pham/LemonApp\", \"https://github.com/Andre-Pham/LemonApp\")\n        ],\n        [],\n        [\n            \"Swift\", \"UIKit\", \"MVC\", \"Create ML\", \"Vision\", \"AVFoundation\", \"Speech\"\n        ]\n    ),\n];","\n/**\n * Throw this error in the case where an area of code shouldn't be capable of being reached.\n * For instance, in the default block of a switch statement that should be exhaustively checking an enum.\n * \n * ```\n * switch (primaryColor) {\n *     case PrimaryColor.red:\n *         console.log(\"RED!\");\n *         break;\n *     case PrimaryColor.blue:\n *         console.log(\"BLUE!\");\n *         break;\n *     case PrimaryColor.yellow:\n *         console.log(\"YELLOW!\");\n *         break;\n *     case default:\n *         throw new UnreachableCaseError(primaryColor);\n * }\n * ```\n */\nexport class UnreachableCaseError extends Error {\n    constructor(val: never) {\n        super(`[UNREACHABLE CASE ERROR] Unreachable case '${JSON.stringify(val)}'`);\n    }\n}","\n/**\n * To be thrown in assertion statements\n * Refer to Assert.ts and AssertionFailure.ts\n */\nexport class AssertionError extends Error {\n    constructor(message: string) {\n        super(`[ASSERTION ERROR] ${message}`);\n    }\n}","import { AssertionError } from \"../errors/AssertionError\";\n\n/**\n * Performs an assertion for debugging at runtime\n * \n * @param condition The condition to be tested\n * @param message The message to output if the condition fails\n */\nexport function assert(condition: boolean, message: string) {\n    if (!condition) { \n        throw new AssertionError(message);\n    }\n}","\nexport enum ResFontWeight {\n    regular,\n    semiBold,\n    bold,\n    black,\n}","import { assert } from \"../../../language/assertions/Assert\";\nimport { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\nimport { ResFont } from \"./ResFont\";\nimport { ResFontWeight } from \"./ResFontWeight\";\n\nclass ResFontFamilyConfig {\n\n    private readonly regular: ResFont | null;\n    private readonly semiBold: ResFont | null;\n    private readonly bold: ResFont | null;\n    private readonly black: ResFont | null;\n    private readonly italic: ResFont | null;\n    private readonly semiBoldItalic: ResFont | null;\n    private readonly boldItalic: ResFont | null;\n    private readonly blackItalic: ResFont | null;\n\n    constructor(\n        regular: ResFont | null, \n        semiBold: ResFont | null,\n        bold: ResFont | null,\n        black: ResFont | null,\n        italic: ResFont | null,\n        semiBoldItalic: ResFont | null,\n        boldItalic: ResFont | null,\n        blackItalic: ResFont | null,\n    ) {\n        this.regular = regular;\n        this.semiBold = semiBold;\n        this.bold = bold;\n        this.black = black;\n        this.italic = italic;\n        this.semiBoldItalic = semiBoldItalic;\n        this.boldItalic = boldItalic;\n        this.blackItalic = blackItalic;\n    }\n\n    public getFont(weight: ResFontWeight, isItalic: boolean): ResFont {\n        switch (weight) {\n            case ResFontWeight.regular:\n                let regular = isItalic ? this.italic : this.regular;\n                assert(regular != null, \"Font requested not provided/available\");\n                return regular;\n            case ResFontWeight.semiBold:\n                let semiBold = isItalic ? this.semiBoldItalic : this.semiBold;\n                assert(semiBold != null, \"Font requested not provided/available\");\n                return semiBold;\n            case ResFontWeight.bold:\n                let bold = isItalic ? this.boldItalic : this.bold;\n                assert(bold != null, \"Font requested not provided/available\");\n                return bold;\n            case ResFontWeight.black:\n                let black = isItalic ? this.blackItalic : this.black;\n                assert(black != null, \"Font requested not provided/available\");\n                return black;\n            default:\n                throw new UnreachableCaseError(weight);\n        }\n    }\n\n}\n\nexport default ResFontFamilyConfig;","import { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\nimport { ResFont } from \"./ResFont\";\nimport ResFontFamilyConfig from \"./ResFontFamilyConfig\";\n\nexport enum ResFontFamily {\n    poppins,\n    circular,\n    plexMono,\n    gilroy,\n}\n\nexport namespace ResFontFamily {\n    export function getConfig(family: ResFontFamily): ResFontFamilyConfig {\n        switch (family) {\n            case ResFontFamily.poppins:\n                return new ResFontFamilyConfig(\n                    ResFont.poppinsMedium, \n                    ResFont.poppinsSemiBold,\n                    ResFont.poppinsBold, \n                    null,\n                    ResFont.poppinsMediumItalic, \n                    ResFont.poppinsSemiBoldItalic,\n                    ResFont.poppinsBoldItalic,\n                    null,\n                );\n            case ResFontFamily.circular:\n                return new ResFontFamilyConfig(\n                    ResFont.circularMedium,\n                    null,\n                    ResFont.circularBold,\n                    ResFont.circularBlack,\n                    ResFont.circularMediumItalic,\n                    null,\n                    ResFont.circularBoldItalic,\n                    ResFont.circularBlackItalic,\n                );\n            case ResFontFamily.plexMono:\n                return new ResFontFamilyConfig(\n                    ResFont.plexMonoMedium,\n                    ResFont.plexMonoSemiBold,\n                    ResFont.plexMonoBold,\n                    null,\n                    ResFont.plexMonoMediumItalic,\n                    ResFont.plexMonoSemiBoldItalic,\n                    ResFont.plexMonoBoldItalic,\n                    null,\n                );\n            case ResFontFamily.gilroy:\n                return new ResFontFamilyConfig(\n                    null,\n                    null,\n                    null,\n                    ResFont.gilroyExtraBold,\n                    null,\n                    null,\n                    null,\n                    null,\n                );\n            default: \n                throw new UnreachableCaseError(family);\n        }\n    }\n}","import React from 'react';\nimport { Text } from 'react-native-paper';\nimport { TextStyle } from 'react-native';\nimport ResTypographyConfig from '../../styling/typography/ResTypographyConfig';\nimport { ResFontFamily } from '../../styling/typography/ResFontFamily';\n\ninterface Props {\n    // Text or other components to be embedded\n    children;\n    // Typography applied\n    typography: ResTypographyConfig;\n    // If the component should expand to take up available horizontal space\n    wide?: boolean;\n    // If the frame should exactly match the text\n    verticalWrap?: boolean;\n    // Custom styling\n    style?: TextStyle;\n}\n\nconst ResText: React.FC<Props> = ({ \n    children, \n    typography,\n    verticalWrap = false,\n    wide = true,\n    style,\n}) => {\n    // For some reason the poppins font is slightly offset\n    // This is a workaround\n    let lineHeightMultiplier = typography.fontFamily == ResFontFamily.poppins ? 1.15 : 1.0;\n    return (\n        <Text\n            style={[\n                wide ? { width: \"100%\" } : { alignSelf: (wide == null) ? null : 'center' },\n                typography.getStylesheet(),\n                verticalWrap ? { \n                    lineHeight: typography.size*lineHeightMultiplier \n                } : null,\n                style,\n            ]}\n        >\n            {children}\n        </Text>\n    );\n}\n\nexport default ResText;","import React from \"react\";\nimport { View, StyleSheet, ViewStyle } from \"react-native\";\nimport PropTypes from \"prop-types\";\n\ninterface Props {\n    children;\n    spacing?: number;\n    verticalSpacing?: number;\n    onLayout?: (event: any) => void;\n    style?: ViewStyle;\n}\n\nconst HStack: React.FC<Props> = ({ \n    children, \n    spacing = 0,\n    verticalSpacing = null,\n    onLayout,\n    style, \n}) => {\n    return (\n        <View \n            onLayout={onLayout}\n            style={[\n                styles.container, \n                { columnGap: spacing, rowGap: verticalSpacing == null ? spacing : verticalSpacing }, \n                style,\n            ]}\n        >\n            {children}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row', \n        flexWrap: 'wrap',\n    }\n});\n\nHStack.propTypes = {\n    children: PropTypes.node.isRequired,\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    spacing: PropTypes.number,\n};\n\nHStack.defaultProps = {\n    style: {},\n    spacing: 0,\n};\n\nexport default HStack;\n","import { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\n\nexport enum OS {\n    ios,\n    android,\n    web,\n    windows,\n    macos,\n    other\n}\n\nexport namespace OS {\n    export function toString(os: OS): string {\n        switch (os) {\n            case OS.ios: \n                return \"iOS\";\n            case OS.android: \n                return \"Android\";\n            case OS.windows: \n                return \"Windows\";\n            case OS.macos: \n                return \"macOS\";\n            case OS.web: \n                return \"Web\";\n            case OS.other: \n                return \"Unknown\";\n            default: \n                throw new UnreachableCaseError(os);\n        }\n    }\n}","import { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\n\nexport enum ScreenType {\n    mobile,\n    large\n}\n\nexport namespace ScreenType {\n    export function toString(screenType: ScreenType): string {\n        switch (screenType) {\n            case ScreenType.mobile:\n                return \"Mobile\";\n            case ScreenType.large:\n                return \"Large\";\n            default:\n                throw new UnreachableCaseError(screenType);\n        }\n    }\n}","import { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\n\nexport enum ColorScheme {\n    dark,\n    light\n}\n\nexport namespace ColorScheme {\n    export function toString(scheme: ColorScheme): string {\n        switch (scheme) {\n            case ColorScheme.dark:\n                return \"Dark Mode\"\n            case ColorScheme.light:\n                return \"Light Mode\"\n            default: \n                throw new UnreachableCaseError(scheme);\n        }\n    }\n}","\nexport enum ResScreenOrientation {\n    Potrait = \"Potrait\",\n    Landscape = \"Landscape\"\n};","import { Appearance, Dimensions, PlatformIOSStatic } from \"react-native\"\nimport { Platform } from 'react-native';\nimport { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\nimport { OS } from \"./types/OS\";\nimport { ScreenType } from \"./types/ScreenType\";\nimport { ColorScheme } from \"./types/ColorScheme\";\nimport { ResScreenOrientation } from \"./types/ResScreenOrientation\";\n\nclass Environment {\n\n    public static readonly instance = new Environment()\n\n    private constructor() { }\n\n    public getColorScheme(): ColorScheme {\n        // TODO: I can't get this to change correctly\n        const colorScheme = Appearance.getColorScheme();\n        switch (colorScheme) {\n            case 'dark':\n                return ColorScheme.dark;\n            case 'light':\n                return ColorScheme.light;\n            default:\n                return ColorScheme.light;\n        }\n    }\n\n    public getOS(): OS {\n        switch (Platform.OS) {\n            case 'android':\n                return OS.android;\n            case 'ios':\n                return OS.ios;\n            case 'windows':\n                return OS.windows;\n            case 'macos':\n                return OS.macos;\n            case 'web':\n                return OS.web;\n            default:\n                return OS.other;\n        }\n    }\n\n    public getScreenType(): ScreenType {\n        const os = this.getOS();\n        switch (os) {\n            case OS.ios:\n                return (Platform as PlatformIOSStatic).isPad ? ScreenType.large : ScreenType.mobile;\n            case OS.android:\n                // TODO: Figure out how to detect Android tablets\n                return ScreenType.mobile;\n            case OS.windows:\n            case OS.macos:\n                return ScreenType.large;\n            case OS.web:\n            case OS.other:\n                const dimensions = this.getScreenDimensions();\n                if (dimensions[1] > dimensions[0]) {\n                    // Height > width, assume mobile\n                    return ScreenType.mobile;\n                }\n                // Any landscape screen on a web client can be assumed to be on a large screen\n                return ScreenType.large;\n            default:\n                throw new UnreachableCaseError(os);\n        }\n    }\n\n    public getScreenOrientation(): ResScreenOrientation {\n        const dimensions = this.getScreenDimensions();\n        if (dimensions[0] > dimensions[1]){\n            return ResScreenOrientation.Landscape;\n        }\n        return ResScreenOrientation.Potrait;\n    }\n\n    public getAspectRatio(): number {\n        const dimensions = this.getScreenDimensions();\n        return dimensions[0]/dimensions[1];\n    }\n\n    public getScreenWidth(): number {\n        return Dimensions.get('window').width;\n    }\n\n    public getScreenHeight(): number {\n        return Dimensions.get('window').height;\n    }\n\n    private getScreenDimensions(): [number, number] {\n        return [\n            Dimensions.get(\"window\").width,\n            Dimensions.get(\"window\").height\n        ]\n    }\n\n}\n\nexport default Environment;","import { assert } from \"../../../language/assertions/Assert\";\nimport { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\nimport Environment from \"../../../state/environment/Environment\";\nimport { ColorScheme } from \"../../../state/environment/types/ColorScheme\";\n\nclass ResColor {\n\n    // Hex string\n    private readonly lightMode: string;\n    // Hex string\n    private readonly darkMode: string;\n\n    constructor(lightMode: string, darkMode?: string) {\n        const hexRegex = /^#[0-9a-fA-F]+$/;\n        // If no dark mode is provided, dark mode / light mode is equivalent\n        let setDarkMode = darkMode || lightMode;\n        assert(hexRegex.test(lightMode), `Invalid lightMode hex color string provided: '${lightMode}'`);\n        assert(hexRegex.test(setDarkMode), `Invalid darkMode hex color string provided: '${setDarkMode}'`);\n        this.lightMode = lightMode;\n        this.darkMode = setDarkMode;\n    }\n\n    /**\n     * Gets the color based on the user's active color scheme (light mode / dark mode)\n     * \n     * @returns Validated color string\n     */\n    public getColor(): string {\n        let colorScheme: ColorScheme = Environment.instance.getColorScheme();\n        switch (colorScheme) {\n            case ColorScheme.dark:\n                return this.darkMode;\n            case ColorScheme.light:\n                return this.lightMode;\n            default:\n                throw new UnreachableCaseError(colorScheme);\n        }\n    }\n\n    public getContrastColor(): string {\n        let hex = this.getColor()\n        hex = hex.slice(1); // Remove \"#\"\n        // convert 3-digit hex to 6-digits.\n        if (hex.length === 3) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n        assert(hex.length === 6, \"Invalid hex color found\")\n        let r = parseInt(hex.slice(0, 2), 16),\n            g = parseInt(hex.slice(2, 4), 16),\n            b = parseInt(hex.slice(4, 6), 16);\n        return (r * 0.299 + g * 0.587 + b * 0.114) > 186 ? \"#000000\" : \"#FFFFFF\";\n    }\n\n}\n\nexport default ResColor;","import ResColor from \"./color/ResColor\";\n\n/**\n * Predefined colors to be used application-wide.\n * Colors are defined with a light-mode and an optional dark-mode variant.\n * Colors should be named using light-mode convention, that is, colors should be named according to how they should be read in light mode. \"Dark text\" is text that is dark in light mode, and light in dark mode.\n */\nclass ResColors {\n\n    static get textDark(): ResColor {\n        // TODO: Update for dark mode\n        return new ResColor(\"#3f4169\");\n    }\n\n    static get textSemiDark(): ResColor {\n        // TODO: Update for dark mode\n        return new ResColor(\"#a6a8c5\");\n    }\n\n    static get textLight(): ResColor {\n        // TODO: Update for dark mode\n        return new ResColor(\"#f8f9fa\");\n    }\n\n    static get fillBackgroundLight(): ResColor {\n        // TODO: Update for dark mode\n        return new ResColor(\"#f2f3f9\");\n    }\n\n    static get behance(): ResColor {\n        return new ResColor(\"#1769ff\");\n    }\n\n    static get gitHub(): ResColor {\n        return new ResColor(\"#24292f\");\n    }\n\n    static get linkedIn(): ResColor {\n        return new ResColor(\"#2d64bc\");\n    }\n\n}\n\nexport default ResColors;","import { ResFontFamily } from \"./ResFontFamily\";\nimport ResFontFamilyConfig from \"./ResFontFamilyConfig\";\nimport { StyleSheet } from 'react-native';\nimport { ResFontWeight } from \"./ResFontWeight\";\nimport ResColor from \"../color/ResColor\";\n\nclass ResTypographyConfig {\n\n    public size: number;\n    public fontFamily: ResFontFamily;\n    // An undefined color allows the component handle the color\n    public resColor: ResColor | undefined;\n    public weight: ResFontWeight;\n    public italic: boolean;\n    public underlined: boolean;\n    public linedOut: boolean;\n    public kerning: number;\n    get font(): string {\n        let config: ResFontFamilyConfig = ResFontFamily.getConfig(this.fontFamily);\n        return config.getFont(this.weight, this.italic);\n    }\n    get color(): string | undefined {\n        return this.resColor?.getColor();\n    }\n    get lineStyle(): \"none\" | \"underline\" | \"line-through\" | \"underline line-through\" {\n        let result = \"\";\n        if (!this.underlined && !this.linedOut) {\n            result = \"none\";\n        } else {\n            if (this.underlined) {\n                result = \"underline\";\n            }\n            if (this.linedOut) {\n                result = (result + \" line-through\").trimStart();\n            }\n        }\n        return (result as \"none\" | \"underline\" | \"line-through\" | \"underline line-through\");\n    }\n\n    constructor(\n        size: number, \n        fontFamily: ResFontFamily, \n        color: ResColor | undefined,\n        weight: ResFontWeight = ResFontWeight.regular, \n        italic: boolean = false, \n        underlined: boolean = false,\n        linedOut: boolean = false,\n        kerning: number = 0,\n    ) {\n        this.size = size;\n        this.fontFamily = fontFamily;\n        this.resColor = color;\n        this.weight = weight;\n        this.italic = italic;\n        this.underlined = underlined;\n        this.linedOut = linedOut;\n        this.kerning = kerning;\n    }\n\n    public getStylesheet(): {} {\n        return StyleSheet.create({\n            typography: {\n                fontFamily: this.font,\n                color: this.color,\n                fontSize: this.size,\n                textDecorationLine: this.lineStyle,\n                letterSpacing: this.kerning,\n            }\n        }).typography;\n    }\n\n}\n\nexport default ResTypographyConfig;","import ResColors from \"./ResColors\";\nimport { ResFontFamily } from \"./typography/ResFontFamily\";\nimport { ResFontWeight } from \"./typography/ResFontWeight\";\nimport ResTypographyConfig from \"./typography/ResTypographyConfig\";\n\nclass ResTypography {\n\n    static get pageTitle(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            32,\n            ResFontFamily.gilroy,\n            ResColors.textDark,\n            ResFontWeight.black,\n        );\n    }\n\n    static get splash(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            32,\n            ResFontFamily.circular,\n            ResColors.textDark,\n            ResFontWeight.black,\n        );\n    }\n\n    static get standoutBody(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            15,\n            ResFontFamily.plexMono,\n            ResColors.textDark,\n        );\n    }\n\n    static get body(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            13,\n            ResFontFamily.plexMono,\n            ResColors.textDark,\n        );\n    }\n\n    static get subscript(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            13,\n            ResFontFamily.plexMono,\n            ResColors.textSemiDark,\n        );\n    }\n\n    static get subscriptLabel(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            11,\n            ResFontFamily.plexMono,\n            ResColors.textSemiDark,\n        );\n    }\n\n    static get chip(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            11,\n            ResFontFamily.plexMono,\n            ResColors.textLight,\n        );\n    }\n\n    static get button(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            15,\n            ResFontFamily.plexMono,\n            ResColors.textLight,\n        );\n    }\n\n    static get buttonSmall(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            13,\n            ResFontFamily.plexMono,\n            ResColors.textLight,\n        );\n    }\n\n    static get display(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            80,\n            ResFontFamily.gilroy,\n            ResColors.textDark,\n            ResFontWeight.black,\n        );\n    }\n\n    static get displayIntro(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            24,\n            ResFontFamily.gilroy,\n            ResColors.textSemiDark,\n            ResFontWeight.black,\n        );\n    }\n\n    static get displaySubscript(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            24,\n            ResFontFamily.poppins,\n            ResColors.textSemiDark,\n            ResFontWeight.semiBold,\n        );\n    }\n\n    static get sectionTitle(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            24,\n            ResFontFamily.gilroy,\n            ResColors.textDark,\n            ResFontWeight.black,\n        );\n    }\n\n    static get header(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            30,\n            ResFontFamily.circular,\n            ResColors.textDark,\n            ResFontWeight.black,\n            false,\n            false,\n            false,\n            -0.5,\n        );\n    }\n\n}\n\nexport default ResTypography;","import React from 'react';\nimport ResText from '../base/ResText/ResText';\nimport HStack from '../containers/HStack';\nimport { View } from 'react-native';\nimport ResTypography from '../styling/ResTypography';\n\ninterface Props {\n    children;\n}\n\nconst YearHeader: React.FC<Props> = ({ \n    children,\n}) => {\n    let typography = ResTypography.sectionTitle;\n    return (\n        <HStack spacing={16} style={{ alignItems: 'baseline' }}>\n            <ResText \n                typography={typography} \n                wide={null}\n            >\n                {children}\n            </ResText>\n\n            <View \n                style={{\n                    flex: 1,\n                    flexGrow: 1,\n                    height: 2,\n                    backgroundColor: typography.color,\n                }}\n            />\n        </HStack>\n    );\n}\n\nexport default YearHeader;","\n/**\n * Dimensions to be used application-wide.\n */\nclass ResDimensions {\n\n    static readonly screenPadding = 35;\n\n    static readonly cardPadding = 18;\n\n    static readonly fillRadius = 16;\n\n    static readonly mainScreenSpacing = 68;\n\n    static readonly pageContentSpacing = 24;\n\n    static readonly cardColumnSpacing = 20;\n\n    static readonly bodyParagraphSpacing = 10;\n\n    static readonly tagSpacing = 10;\n\n    static readonly iconButtonSize = 40;\n\n    static readonly iconButtonSpacing = 28;\n\n}\n\nexport default ResDimensions;","import React from 'react';\nimport { StyleSheet, TouchableOpacity, View, ViewStyle } from 'react-native';\nimport ResDimensions from '../styling/ResDimensions';\nimport ResColor from '../styling/color/ResColor';\n\ninterface Props {\n    color: ResColor;\n    onPress?: () => void | null;\n    children; // No type - can be any component\n    style?: ViewStyle;\n}\n\nconst FlatContainer: React.FC<Props> = ({ \n    color,\n    onPress = null,\n    children,\n    style,\n}) => {\n    // Touchable opacity stops the highlighting of text - remove it if it's not a button\n    return onPress == null ? (\n        <View\n            style={[\n                styles.container,\n                { backgroundColor: color.getColor() },\n                style,\n            ]}\n        >\n            {children}\n        </View>\n    ) : (\n        <TouchableOpacity onPress={onPress} disabled={onPress == null}>\n            <View\n                style={[\n                    styles.container,\n                    { backgroundColor: color.getColor() },\n                    style,\n                ]}\n            >\n                {children}\n            </View>\n        </TouchableOpacity>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        borderRadius: ResDimensions.fillRadius,\n        padding: ResDimensions.cardPadding,\n    }\n});\n\nexport default FlatContainer;","import React from 'react';\nimport { Text } from 'react-native-paper';\nimport { TextStyle, Linking } from 'react-native';\nimport ResTypographyConfig from '../../styling/typography/ResTypographyConfig';\nimport { ResFontFamily } from '../../styling/typography/ResFontFamily';\nimport { ResFontWeight } from '../../styling/typography/ResFontWeight';\n\ninterface Props {\n    // Text or other components to be embedded\n    children;\n    // The URL to open\n    url: string;\n    // Typography applied\n    typography: ResTypographyConfig;\n    // If the component should expand to take up available horizontal space\n    wide?: boolean;\n    // If the frame should exactly match the text\n    verticalWrap?: boolean;\n    // Custom styling\n    style?: TextStyle;\n}\n\nconst ResHyperlink: React.FC<Props> = ({ \n    children, \n    url,\n    typography,\n    verticalWrap = false,\n    wide = true,\n    style,\n}) => {\n    typography.weight = ResFontWeight.bold;\n    typography.underlined = true;\n\n    const handlePress = React.useCallback(() => {\n        Linking.openURL(url);\n    }, [url]);\n\n    // For some reason the poppins font is slightly offset\n    // This is a workaround\n    let lineHeightMultiplier = typography.fontFamily == ResFontFamily.poppins ? 1.15 : 1.0;\n    return (\n        <Text\n            style={[\n                wide ? { width: \"100%\" } : { alignSelf: 'center' },\n                typography.getStylesheet(),\n                verticalWrap ? { \n                    lineHeight: typography.size*lineHeightMultiplier \n                } : null,\n                style,\n            ]}\n            onPress={handlePress}\n        >\n            {children}\n        </Text>\n    );\n}\n\nexport default ResHyperlink;","import React from 'react';\nimport { StyleSheet, TouchableOpacity, View, ViewStyle } from 'react-native';\nimport ResColor from '../../styling/color/ResColor';\nimport ResDimensions from '../../styling/ResDimensions';\n\ninterface Props {\n    color: ResColor;\n    onPress?: () => void | null;\n    children; // No type - can be any component\n    style?: ViewStyle;\n}\n\nconst ResChip: React.FC<Props> = ({ \n    color,\n    onPress = null,\n    children,\n    style,\n}) => {\n    // Touchable opacity stops the highlighting of text - remove it if it's not a button\n    return onPress == null ? (\n        <View\n            style={[\n                styles.container,\n                { backgroundColor: color.getColor() },\n                style,\n            ]}\n        >\n            {children}\n        </View>\n    ) : (\n        <TouchableOpacity onPress={onPress} disabled={onPress == null}>\n            <View\n                style={[\n                    styles.container,\n                    { backgroundColor: color.getColor() },\n                    style,\n                ]}\n            >\n                {children}\n            </View>\n        </TouchableOpacity>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        borderRadius: 50,\n        paddingVertical: 6,\n        paddingHorizontal: 12,\n        alignSelf: 'flex-start'\n    }\n});\n\nexport default ResChip;","import React from 'react';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport ResTypographyConfig from '../../styling/typography/ResTypographyConfig';\nimport ResColor from '../../styling/color/ResColor';\nimport { StyleProp, TouchableOpacity, ViewStyle } from 'react-native';\nimport ResText from '../ResText/ResText';\n\ninterface Props {\n    label: string;\n    typography: ResTypographyConfig;\n    color: ResColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    disabled?: boolean;\n    wide?: boolean;\n    style?: StyleProp<ViewStyle>;\n    onPress: () => void;\n}\n\nconst ResSmallButton: React.FC<Props> = ({ \n    label, \n    typography, \n    color, \n    icon = null,\n    disabled = false, \n    wide = true,\n    style, \n    onPress,\n}) => {\n    return (\n        <TouchableOpacity \n            onPress={disabled ? undefined : onPress} \n            style={[\n                { \n                    flexDirection: 'row', \n                    alignItems: 'center', \n                    justifyContent: 'center', \n                    paddingVertical: 6, \n                    paddingHorizontal: 14, \n                    borderRadius: 50, \n                    backgroundColor: color.getColor(), \n                    opacity: disabled ? 0.5 : 1,\n                }, \n                wide ? { width: \"100%\" } : { alignSelf: 'center' },\n                style,\n            ]}\n            disabled={disabled}\n        >\n            {icon && <Icon name={icon} size={16} color={color} />}\n\n            <ResText typography={typography} wide={false}>\n                {label}\n            </ResText>\n        </TouchableOpacity>\n    );\n}\n\nexport default ResSmallButton;","import React from 'react';\nimport ResText from '../base/ResText/ResText';\nimport HStack from '../containers/HStack';\nimport { View, ViewStyle } from 'react-native';\nimport ResTypography from '../styling/ResTypography';\nimport FlatContainer from '../containers/FlatContainer';\nimport ResColors from '../styling/ResColors';\nimport ResHyperlink from '../base/ResHyperlink/ResHyperlink';\nimport VStack from '../containers/VStack';\nimport ResChip from '../base/ResChip/ResChip';\nimport ResColor from '../styling/color/ResColor';\nimport Experience from '../../data/experience/Experience';\nimport ResDimensions from '../styling/ResDimensions';\nimport ResSmallButton from '../base/ResButton/ResSmallButton';\n\ninterface Props {\n    experience: Experience;\n    style?: ViewStyle;\n}\n\nconst ExperienceCard: React.FC<Props> = ({ \n    experience,\n    style,\n}) => {\n    const renderLinks = () => {\n        return experience.links.map((link) => (\n            <ResText typography={ResTypography.body} key={link.url}>\n                {link.label + \": \"}\n\n                <ResHyperlink\n                    url={link.url}\n                    typography={ResTypography.body}\n                >\n                    {link.shownURL}\n                </ResHyperlink>\n            </ResText>\n        ));\n    };\n\n    const renderDownloads = () => {\n        return experience.files.map((file) => (\n            <ResSmallButton \n                label={file.label}\n                typography={ResTypography.buttonSmall}\n                color={ResColors.behance}\n                wide={false}\n                onPress={() => {\n                    const fileUrl = require('/assets/files/' + file.fileName);\n                    try {\n                        // Assume we're on web\n                        const link = document.createElement('a');\n                        link.href = fileUrl;\n                        link.download = file.fileName; // Replace with the desired file name and extension\n                        link.click();\n                    } catch (error) {\n                        console.error('File download failed:', error);\n                    }\n                }}\n                style={{ alignSelf: 'flex-start' }}\n            />\n        ));\n    };\n\n    const renderTags = () => {\n        return experience.tags.map((tag) => (\n            <ResChip\n                color={ResColors.textDark}\n                key={tag}\n            >\n                <ResText typography={ResTypography.chip}>\n                    {tag}\n                </ResText>\n            </ResChip>\n        ));\n    }\n\n    return (\n        <FlatContainer\n            color={ResColors.fillBackgroundLight}\n            style={{ flex: 1, ...style }}\n        >\n            <ResText typography={ResTypography.header}>\n                {experience.name}\n            </ResText>\n\n            <VStack spacing={ResDimensions.bodyParagraphSpacing} style={{ paddingTop: 4 }}>\n                <ResText typography={ResTypography.subscript}>\n                    {experience.subscriptText}\n                </ResText>\n\n                <ResText typography={ResTypography.body}>\n                    {experience.description}\n                </ResText>\n\n                {renderLinks()}\n\n                {\n                    experience.files.length == 0\n                        ?\n                    <></>\n                        :\n                     <HStack spacing={ResDimensions.tagSpacing} style={{ paddingTop: 6 }}>\n                        {renderDownloads()}\n                    </HStack>\n                }\n\n                <HStack spacing={ResDimensions.tagSpacing} style={{ paddingTop: 6 }}>\n                    {renderTags()}\n                </HStack>\n            </VStack>\n        </FlatContainer>\n    );\n}\n\nexport default ExperienceCard;","import { Draft, PayloadAction, configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n/**\n * A redux wrapper for managing application-wide state using the publisher-subscriber pattern.\n * The class contains the state value (generic type) to be read.\n * To only be initialised within StateManager.\n */\nclass ResValuePublisher<Type> {\n\n    private readonly slice;\n    private readonly publisher;\n\n    constructor(initialState: Type) {\n        this.slice = createSlice({\n            name: 'ResValuePublisher',\n            initialState: {\n                value: initialState\n            },\n            reducers: {\n                publishAction: (state, newValue: PayloadAction<Draft<Type>>) => {\n                    state.value = newValue.payload;\n                }\n            }\n        });\n        \n        this.publisher = configureStore({\n            reducer: this.slice.reducer\n        });\n    }\n\n    public subscribe(callback: () => void) {\n        this.publisher.subscribe(callback);\n    }\n\n    public publish(value: Type) {\n        this.publisher.dispatch(this.slice.actions.publishAction(value));\n    }\n\n    public read(): Type {\n        return this.publisher.getState().value;\n    }\n\n}\n\nexport default ResValuePublisher;","\nexport enum ActiveSection {\n    none,\n    experience,\n    skills,\n    education,\n}","import ResValuePublisher from \"./impl/ResValuePublisher\";\nimport { ActiveSection } from \"./types/ActiveSection\";\n\n/**\n * Stores application-level state to avoid having to pass state to different components, and reduces component coupling. Uses the publisher-subscriber pattern.\n * \n * To define value-less state, statically instantiate a ResPublisher.\n * ``` public static readonly myState = new ResPublisher(); ```\n * To publish to that state, call the publish method. This would be done in a component.\n * ``` StateManager.myState.publish(); ```\n * Any component can subscribe. Every time the state is published, a callback is called.\n * ```\n * StateManager.myState.subscribe(() => {\n *     // React to the state change, e.g. update hooks or call forceUpdate()\n * });\n * ```\n * \n * To define a state with value, statically instantiate a ResValuePublisher.\n * ``` public static readonly loginStatus = new ResValuePublisher(LoginStatus.loggedOut); ```\n * To publish to that state, a value must be passed to the publish method. This would be done in a component.\n * ``` StateManager.loginStatus.publish(LoginStatus.worker); ```\n * Any component can subscribe. Every time the state is published, a callback is called.\n * ```\n * StateManager.loginStatus.subscribe(() => {\n *     // We can read the state value\n *     let stateValue: LoginStatus = StateManager.loginStatus.read();\n * \n *     // React to the state change, e.g. update hooks or call forceUpdate()\n * });\n * ```\n */\nclass StateManager {\n\n    public static readonly activeSection = new ResValuePublisher(ActiveSection.none);\n\n    public static readonly contentWidth = new ResValuePublisher(0.0);\n\n}\n\nexport default StateManager;","import { Dimensions, View } from 'react-native';\nimport ExperiencePeriod from '../../data/experience/ExperiencePeriod';\nimport YearHeader from './YearHeader';\nimport HStack from '../containers/HStack';\nimport ExperienceCard from './ExperienceCard';\nimport { useEffect, useState } from 'react';\nimport Environment from '../../state/environment/Environment';\nimport { ResScreenOrientation } from '../../state/environment/types/ResScreenOrientation';\nimport ResDimensions from '../styling/ResDimensions';\nimport StateManager from '../../state/publishers/StateManager';\nimport VStack from '../containers/VStack';\n\ninterface Props {\n    period: ExperiencePeriod;\n}\n\nconst ExperienceSection: React.FC<Props> = ({\n    period,\n}) => {\n    const [screenIsPortrait, setScreenIsPortrait] = useState(Environment.instance.getScreenWidth() <= 950);\n    const [componentWidth, setComponentWidth] = useState(StateManager.contentWidth.read());\n\n    useEffect(() => {\n        Dimensions.addEventListener('change', (newDimensions) => {\n            setScreenIsPortrait(Environment.instance.getScreenWidth() <= 950);\n        });\n    }, []);\n\n    StateManager.contentWidth.subscribe(() => {\n        setComponentWidth(StateManager.contentWidth.read());\n    });\n\n    let columnCount = screenIsPortrait ? 1 : 2;\n    let gap = (columnCount - 1)*ResDimensions.cardColumnSpacing;\n\n    const renderExperienceCards = () => {\n        return period.experiences.map((experience) => (\n            <ExperienceCard \n                key={experience.name} \n                experience={experience} \n                style={{ flex: null, width: (componentWidth - gap) / columnCount }} \n            />\n        ));\n    };\n\n    return (\n        <VStack spacing={ResDimensions.pageContentSpacing} style={{ width: componentWidth }}>\n            <YearHeader>\n                {period.label}\n            </YearHeader>\n\n            <HStack spacing={ResDimensions.cardColumnSpacing}>\n                {renderExperienceCards()}\n            </HStack>\n        </VStack>\n    );\n}\n\nexport default ExperienceSection;","\nexport enum ResImageScale {\n    none,\n    scaleToFit,\n    scaleToFill,\n    scaleToFillCrop,\n}","import React, { useEffect, useState } from 'react';\nimport { Image, ImageResizeMode, ImageStyle, View, ViewStyle } from 'react-native';\nimport { ResImageScale } from './ResImageScale';\nimport { UnreachableCaseError } from '../../../language/errors/UnreachableCaseError';\n\ninterface Props {\n    fileName: string;\n    width?: number;\n    height?: number;\n    scale?: ResImageScale;\n    style?: ImageStyle;\n}\n\nconst ResImage: React.FC<Props> = ({ \n    fileName,\n    width = 0,\n    height = 0,\n    scale = ResImageScale.none,\n    style,\n}) => {\n    const [size, setSize] = useState({ width: width, height: height });\n    const [resizeMode, setResizeMode] = useState<ImageResizeMode>(null);\n    const [imageSize, setImageSize] = useState({ \n        // Don't set these to 0, causes NaN issues\n        width: 1, height: 1,\n    });\n\n    useEffect(() => {\n        const imagePath = require('/assets/images/' + fileName); // Replace with the actual path to your image\n        Image.getSize(imagePath, (width, height) => {\n            setImageSize({ width: width, height: height });\n        }, (error) => {\n            console.log('Error getting image dimensions:', error);\n        });\n\n        if (scale == ResImageScale.scaleToFill) {\n            if (width > height) {\n                setSize({ width: width, height: undefined })\n            } else {\n                setSize({ width: imageSize.width*height/imageSize.height, height: undefined });\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        switch (scale) {\n            case ResImageScale.none:\n                setResizeMode(\"stretch\");\n                break;\n            case ResImageScale.scaleToFit:\n                setResizeMode(\"contain\");\n                break;\n            case ResImageScale.scaleToFill:\n                setResizeMode(\"cover\");\n                break;\n            case ResImageScale.scaleToFillCrop:\n                setResizeMode(\"cover\");\n                break;\n            default:\n                throw new UnreachableCaseError(scale);\n        }\n    }, []);\n\n    return (\n        <Image\n            source={require('/assets/images/' + fileName)}\n            resizeMode={resizeMode}\n            style={{\n                width: size.width,\n                height: size.height,\n                aspectRatio: scale == ResImageScale.none ? null : 1,\n                ...style\n            }}\n        />\n    );\n}\n\nexport default ResImage;","import React from 'react';\nimport ResText from '../base/ResText/ResText';\nimport HStack from '../containers/HStack';\nimport { Linking } from 'react-native';\nimport ResTypography from '../styling/ResTypography';\nimport VStack from '../containers/VStack';\nimport ResChip from '../base/ResChip/ResChip';\nimport ResColors from '../styling/ResColors';\nimport ResIconButtonLabelled from '../base/ResIconButtonLabelled/ResIconButtonLabelled';\nimport ResImage from '../base/ResImage/ResImage';\n\ninterface Props {\n    // None\n}\n\nconst Header: React.FC<Props> = ({ \n    // None\n}) => {\n    return (\n        <HStack spacing={16}>\n            <ResImage \n                height={64} \n                width={64} \n                fileName=\"profile_picture.png\" \n                style={{ borderRadius: 50, alignSelf: 'center' }} \n            />\n\n            <VStack spacing={4} style={{ alignSelf: 'center' }}>\n                <ResText \n                    typography={ResTypography.pageTitle}\n                    verticalWrap={true}\n                >\n                    Andre Pham\n                </ResText>\n\n                <ResText \n                    typography={ResTypography.subscript}\n                    verticalWrap={true}\n                >\n                    andrekypham@gmail.com\n                </ResText>\n            </VStack>\n        </HStack>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { ViewStyle } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport ResColor from '../../styling/color/ResColor';\n\ninterface Props {\n    // Icon name (https://pictogrammers.com/library/mdi/)\n    icon: string;\n    // Icon fill color\n    color: ResColor;\n    // Icon size\n    size: number;\n    // Custom style\n    style?: ViewStyle;\n}\n\nconst ResIcon: React.FC<Props> = ({ \n    icon,\n    color,\n    size,\n    style,\n}) => {\n    return (\n        <Icon \n            name={icon} \n            size={size} \n            color={color.getColor()} \n            style={style}\n        />\n    );\n}\n\nexport default ResIcon;","import React from 'react';\nimport { Button } from 'react-native-paper';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport ResTypographyConfig from '../../styling/typography/ResTypographyConfig';\nimport ResColor from '../../styling/color/ResColor';\nimport { StyleSheet, TouchableOpacity, View, ViewStyle } from 'react-native';\nimport Environment from '../../../state/environment/Environment';\nimport { OS } from '../../../state/environment/types/OS';\nimport ResText from '../ResText/ResText';\nimport ResIcon from '../ResIcon/ResIcon';\nimport ResImage from '../ResImage/ResImage';\nimport { ResImageScale } from '../ResImage/ResImageScale';\n\ninterface Props {\n    color: ResColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    fileName?: string;\n    size: number;\n    style?: ViewStyle;\n    onPress: () => void;\n}\n\nconst ResIconButton: React.FC<Props> = ({ \n    color,\n    icon = null, \n    fileName = null,\n    size,\n    style,\n    onPress,\n}) => {\n    return (\n        <TouchableOpacity \n            onPress={onPress} \n            disabled={onPress == null} \n            style={{ \n                backgroundColor: color.getColor(),\n                borderRadius: 50,\n                width: size,\n                height: size,\n                justifyContent: 'center',\n                ...style,\n            }}\n        >\n            {\n                (icon == null) \n                    ?\n                <ResImage \n                    fileName={fileName}\n                    width={size*1.8/3.0}\n                    height={size*1.8/3.0}\n                    scale={ResImageScale.scaleToFit}\n                    style={{\n                        alignSelf: 'center',\n                    }}\n                />\n                    :\n                <ResIcon \n                    icon={icon}\n                    size={size*2.2/3.0}\n                    color={new ResColor('#ffffff')}\n                    style={{\n                        alignSelf: 'center',\n                    }}\n                /> \n            }\n        </TouchableOpacity>\n    );\n}\n\nexport default ResIconButton;","import React from 'react';\nimport ResColor from '../../styling/color/ResColor';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport ResText from '../ResText/ResText';\nimport ResIcon from '../ResIcon/ResIcon';\nimport VStack from '../../containers/VStack';\nimport ResTypography from '../../styling/ResTypography';\nimport ResIconButton from '../ResIconButton/ResIconButton';\n\ninterface Props {\n    color: ResColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    fileName?: string;\n    label: string;\n    size: number;\n    style?: ViewStyle;\n    onPress: () => void;\n}\n\nconst ResIconButtonLabelled: React.FC<Props> = ({ \n    color,\n    icon = null, \n    fileName = null,\n    label,\n    size,\n    style,\n    onPress,\n}) => {\n    return (\n        <VStack \n            spacing={5} \n            style={{ \n                alignItems: 'center', \n                alignSelf: 'flex-start', \n                // Adjsuts frame to match label (positioned aboslute)\n                // Tested - it does scale (both the padding and the absolute positioning)\n                paddingBottom: 16, \n                ...style \n            }}\n        >\n            <ResIconButton \n                icon={icon}\n                fileName={fileName}\n                color={color}\n                size={size}\n                onPress={onPress}\n            />\n\n            <View style={{ position: 'absolute', top: size + 4 }}>\n                <ResText \n                    typography={ResTypography.subscriptLabel}\n                    style={{ alignSelf: 'center', textAlign: 'center', width: 1000 }}\n                >\n                    {label}\n                </ResText>\n            </View>\n        </VStack>\n    );\n}\n\nexport default ResIconButtonLabelled;","import React from 'react';\nimport ResText from '../base/ResText/ResText';\nimport HStack from '../containers/HStack';\nimport { Clipboard, Linking, ViewStyle } from 'react-native';\nimport ResTypography from '../styling/ResTypography';\nimport VStack from '../containers/VStack';\nimport ResFlexImage from '../base/ResFlexImage/ResFlexImage';\nimport ResChip from '../base/ResChip/ResChip';\nimport ResColors from '../styling/ResColors';\nimport ResIconButtonLabelled from '../base/ResIconButtonLabelled/ResIconButtonLabelled';\nimport ResImage from '../base/ResImage/ResImage';\nimport ResDimensions from '../styling/ResDimensions';\n\ninterface Props {\n    style?: ViewStyle;\n}\n\nconst SplashIntro: React.FC<Props> = ({ \n    style\n}) => {\n    return (\n        <VStack spacing={16} style={style}>\n            <ResText \n                typography={ResTypography.splash}\n                style={{\n                    maxWidth: 550,\n                }}\n            >\n                I'm a mobile developer that specialises in native iOS development and React Native. My passions are code, art and design.\n            </ResText>\n\n            <ResText \n                typography={ResTypography.standoutBody}\n                style={{\n                    maxWidth: 550,\n                }}\n            >\n                {/* No orphans! (Hence the \"\\n\") */}\n                {\"Find my social links below, or explore my\\nqualifications and experience.\"}\n            </ResText>\n\n            <HStack spacing={ResDimensions.iconButtonSpacing} style={{ paddingTop: 8 }}>\n                <ResIconButtonLabelled\n                    icon=\"github\"\n                    color={ResColors.gitHub}\n                    label=\"GitHub\"\n                    size={ResDimensions.iconButtonSize}\n                    onPress={() => {\n                        Linking.openURL(\"https://github.com/Andre-Pham\");\n                    }}\n                />\n\n                <ResIconButtonLabelled\n                    fileName={'behance_white.png'}\n                    color={ResColors.behance}\n                    label=\"Behance\"\n                    size={ResDimensions.iconButtonSize}\n                    onPress={() => {\n                        Linking.openURL(\"https://behance.net/andrepham\");\n                    }}\n                />\n\n                <ResIconButtonLabelled\n                    icon=\"linkedin\"\n                    color={ResColors.linkedIn}\n                    label=\"LinkedIn\"\n                    size={ResDimensions.iconButtonSize}\n                    onPress={() => {\n                        Linking.openURL(\"https://www.linkedin.com/in/andrekypham\");\n                    }}\n                />\n            </HStack>\n        </VStack>\n    );\n}\n\nexport default SplashIntro;","import React from 'react';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport ResTypographyConfig from '../../styling/typography/ResTypographyConfig';\nimport ResColor from '../../styling/color/ResColor';\nimport { StyleProp, TouchableOpacity, ViewStyle } from 'react-native';\nimport ResText from '../ResText/ResText';\n\ninterface Props {\n    label: string;\n    typography: ResTypographyConfig;\n    color: ResColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    disabled?: boolean;\n    wide?: boolean;\n    style?: StyleProp<ViewStyle>;\n    onPress: () => void;\n}\n\nconst ResButton: React.FC<Props> = ({ \n    label, \n    typography, \n    color, \n    icon = null,\n    disabled = false, \n    wide = true,\n    style, \n    onPress,\n}) => {\n    return (\n        <TouchableOpacity \n            onPress={disabled ? undefined : onPress} \n            style={[\n                { \n                    flexDirection: 'row', \n                    alignItems: 'center', \n                    justifyContent: 'center', \n                    paddingVertical: 12, \n                    paddingHorizontal: 24, \n                    borderRadius: 50, \n                    backgroundColor: color.getColor(), \n                    opacity: disabled ? 0.5 : 1,\n                }, \n                wide ? { width: \"100%\" } : { alignSelf: 'center' },\n                style,\n            ]}\n            disabled={disabled}\n        >\n            {icon && <Icon name={icon} size={16} color={color} />}\n\n            <ResText typography={typography} wide={false}>\n                {label}\n            </ResText>\n        </TouchableOpacity>\n    );\n}\n\nexport default ResButton;","import React, { useState } from 'react';\nimport { StyleSheet, ViewStyle } from 'react-native';\nimport ResButton from '../base/ResButton/ResButton';\nimport StateManager from '../../state/publishers/StateManager';\nimport ResColors from '../styling/ResColors';\nimport { ActiveSection } from '../../state/publishers/types/ActiveSection';\nimport ResTypography from '../styling/ResTypography';\n\ninterface Props {\n    label: string;\n    section: ActiveSection;\n    style?: ViewStyle;\n}\n\nconst SplashButton: React.FC<Props> = ({ \n    label,\n    section,\n    style,\n}) => {\n    const [activeSection, setActiveSection] = useState(StateManager.activeSection.read());\n\n    StateManager.activeSection.subscribe(() => {\n        setActiveSection(StateManager.activeSection.read());\n    });\n\n    let buttonSize = 116\n    let selectedTypography = ResTypography.button;\n    selectedTypography.resColor = ResColors.textLight;\n    let unselectedTypography = ResTypography.button;\n    unselectedTypography.resColor = ResColors.textDark;\n\n    return (\n        <ResButton \n            label={label}\n            typography={activeSection == section ? selectedTypography : unselectedTypography}\n            color={\n                activeSection == section ?\n                ResColors.behance :\n                ResColors.fillBackgroundLight\n            }\n            onPress={() => {\n                let toPublish = (\n                    activeSection == section ?\n                    ActiveSection.none : \n                    section\n                );\n                StateManager.activeSection.publish(toPublish);\n            }}\n            wide={false}\n            style={[\n                { width: buttonSize, height: buttonSize, borderRadius: 100 },\n                activeSection == section ? styles.shadow : {},\n                style\n            ]}\n        />\n    );\n}\n\nconst styles = StyleSheet.create({\n    shadow: {\n        shadowColor: '#000000',\n        shadowOffset: {\n            width: 0,\n            height: 4,\n        },\n        shadowOpacity: 0.4,\n        shadowRadius: 11,\n    }\n});\n\nexport default SplashButton;","import React, { useEffect, useState } from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport ResButton from '../base/ResButton/ResButton';\nimport StateManager from '../../state/publishers/StateManager';\nimport ResColors from '../styling/ResColors';\nimport { ActiveSection } from '../../state/publishers/types/ActiveSection';\nimport ResTypography from '../styling/ResTypography';\nimport Environment from '../../state/environment/Environment';\nimport { ResScreenOrientation } from '../../state/environment/types/ResScreenOrientation';\nimport VStack from '../containers/VStack';\nimport Header from './Header';\nimport SplashIntro from './SplashIntro';\nimport HStack from '../containers/HStack';\nimport SplashButton from './SplashButton';\nimport ResDimensions from '../styling/ResDimensions';\n\ninterface Props {\n    // No props\n}\n\nconst Splash: React.FC<Props> = ({ \n    // No props\n}) => {\n    const [screenIsPortrait, setScreenIsPortrait] = useState(Environment.instance.getScreenWidth() <= 950);\n\n    useEffect(() => {\n        Dimensions.addEventListener('change', (newDimensions) => {\n            setScreenIsPortrait(Environment.instance.getScreenWidth() <= 950);\n        });\n    }, []);\n\n    let verticalButtonSpacing = 32;\n    let horizontalButtonSpacing = Math.sqrt(Math.pow(verticalButtonSpacing, 2) - Math.pow(verticalButtonSpacing/2, 2));\n\n    const onLayout = (event: any) => {\n        const layout = event.nativeEvent.layout;\n        StateManager.contentWidth.publish(layout.width);\n    }\n\n    if (screenIsPortrait) {\n        return (\n            <VStack spacing={ResDimensions.mainScreenSpacing} onLayout={onLayout}>\n                <SplashIntro style={{ flex: 1 }} />\n\n                <HStack spacing={horizontalButtonSpacing} style={{ alignItems: 'center' }}>\n                    <SplashButton \n                        label=\"experience\"\n                        section={ActiveSection.experience}\n                    />\n\n                    <SplashButton \n                        label=\"skills\"\n                        section={ActiveSection.skills}\n                    />\n\n                    <SplashButton \n                        label=\"education\"\n                        section={ActiveSection.education}\n                    />\n                </HStack> \n            </VStack>\n        );\n    } else {\n        return (\n            <HStack spacing={64} style={{ alignItems: 'flex-start' }} onLayout={onLayout}>\n                <SplashIntro />\n\n                <HStack spacing={horizontalButtonSpacing} style={{ alignItems: 'center' }}>\n                    <VStack spacing={verticalButtonSpacing}>\n                        <SplashButton \n                            label=\"experience\"\n                            section={ActiveSection.experience}\n                        />\n\n                        <SplashButton \n                            label=\"skills\"\n                            section={ActiveSection.skills}\n                        />\n                    </VStack>\n\n                    <SplashButton \n                        label=\"education\"\n                        section={ActiveSection.education}\n                    />\n                </HStack>   \n            </HStack>\n        );\n    }\n}\n\nexport default Splash;","import React from 'react';\nimport ResText from '../base/ResText/ResText';\nimport HStack from '../containers/HStack';\nimport { View, ViewStyle } from 'react-native';\nimport ResTypography from '../styling/ResTypography';\nimport FlatContainer from '../containers/FlatContainer';\nimport ResColors from '../styling/ResColors';\nimport VStack from '../containers/VStack';\nimport ResDimensions from '../styling/ResDimensions';\n\ninterface Props {\n    title: string;\n    children;\n    style?: ViewStyle;\n}\n\nconst BasicCard: React.FC<Props> = ({ \n    title,\n    children,\n    style,\n}) => {\n    return (\n        <FlatContainer\n            color={ResColors.fillBackgroundLight}\n            style={style}\n        >\n            <VStack spacing={ResDimensions.bodyParagraphSpacing}>\n                <ResText typography={ResTypography.header}>\n                    {title}\n                </ResText>\n\n                {children}\n            </VStack>\n        </FlatContainer>\n    );\n}\n\nexport default BasicCard;","import { Dimensions, View } from 'react-native';\nimport HStack from '../containers/HStack';\nimport { useEffect, useState } from 'react';\nimport Environment from '../../state/environment/Environment';\nimport ResDimensions from '../styling/ResDimensions';\nimport StateManager from '../../state/publishers/StateManager';\nimport ResText from '../base/ResText/ResText';\nimport ResTypography from '../styling/ResTypography';\nimport ResColors from '../styling/ResColors';\nimport ResHyperlink from '../base/ResHyperlink/ResHyperlink';\nimport ResSmallButton from '../base/ResButton/ResSmallButton';\nimport BasicCard from './BasicCard';\n\ninterface Props {\n    // No props\n}\n\nconst Education: React.FC<Props> = ({\n    \n}) => {\n    const [screenIsPortrait, setScreenIsPortrait] = useState(Environment.instance.getScreenWidth() <= 950);\n    const [componentWidth, setComponentWidth] = useState(StateManager.contentWidth.read());\n\n    useEffect(() => {\n        Dimensions.addEventListener('change', (newDimensions) => {\n            setScreenIsPortrait(Environment.instance.getScreenWidth() <= 950);\n        });\n    }, []);\n\n    StateManager.contentWidth.subscribe(() => {\n        setComponentWidth(StateManager.contentWidth.read());\n    });\n\n    let columnCount = screenIsPortrait ? 1 : 2;\n    let gap = (columnCount - 1)*ResDimensions.cardColumnSpacing;\n\n    const downloadAcademicTranscript = async () => {\n        const fileUrl = require('/assets/files/academic_transcript_unofficial.pdf');\n        try {\n            // Assume we're on web\n            const link = document.createElement('a');\n            link.href = fileUrl;\n            link.download = 'academic_transcript_andrepham.pdf'; // Replace with the desired file name and extension\n            link.click();\n        } catch (error) {\n            console.error('File download failed:', error);\n        }\n    };\n\n    return (\n        <HStack spacing={ResDimensions.cardColumnSpacing} style={{ width: componentWidth }}>\n            <BasicCard \n                title=\"Bachelor of Software Engineering (Honours)\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>\n                    {\"Monash University, Mar 2020 - Nov 2023\"}\n                </ResText>\n            </BasicCard>\n\n            <BasicCard \n                title=\"First Class Honours\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>\n                    {\"WAM: 87.625\\nGPA: 3.917\"}\n                </ResText>\n\n                <ResHyperlink \n                    typography={ResTypography.body}\n                    url=\"https://www.monash.edu/students/admin/exams/results/results-legend\"\n                >\n                    {\"What do these mean?\"}\n                </ResHyperlink>\n            </BasicCard>\n\n            <BasicCard \n                title=\"Academic Transcript\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResSmallButton \n                    label='download'\n                    typography={ResTypography.buttonSmall}\n                    color={ResColors.behance}\n                    wide={false}\n                    onPress={downloadAcademicTranscript}\n                    style={{ alignSelf: 'flex-start' }}\n                />\n\n                <ResHyperlink \n                    typography={ResTypography.body}\n                    url=\"https://www.monash.edu/students/support/connect/official-documents/academic-transcripts\"\n                >\n                    {\"What's an academic transcript?\"}\n                </ResHyperlink>\n            </BasicCard>\n        </HStack>\n    );\n}\n\nexport default Education;","import { Dimensions, View } from 'react-native';\nimport HStack from '../containers/HStack';\nimport { useEffect, useState } from 'react';\nimport Environment from '../../state/environment/Environment';\nimport ResDimensions from '../styling/ResDimensions';\nimport StateManager from '../../state/publishers/StateManager';\nimport ResText from '../base/ResText/ResText';\nimport ResTypography from '../styling/ResTypography';\nimport ResColors from '../styling/ResColors';\nimport ResHyperlink from '../base/ResHyperlink/ResHyperlink';\nimport ResSmallButton from '../base/ResButton/ResSmallButton';\nimport BasicCard from './BasicCard';\n\ninterface Props {\n    // No props\n}\n\nconst Skills: React.FC<Props> = ({\n    \n}) => {\n    const [screenIsPortrait, setScreenIsPortrait] = useState(Environment.instance.getScreenWidth() <= 950);\n    const [componentWidth, setComponentWidth] = useState(StateManager.contentWidth.read());\n\n    useEffect(() => {\n        Dimensions.addEventListener('change', (newDimensions) => {\n            setScreenIsPortrait(Environment.instance.getScreenWidth() <= 950);\n        });\n    }, []);\n\n    StateManager.contentWidth.subscribe(() => {\n        setComponentWidth(StateManager.contentWidth.read());\n    });\n\n    let columnCount = screenIsPortrait ? 1 : 1;\n    let gap = (columnCount - 1)*ResDimensions.cardColumnSpacing;\n\n    return (\n        <HStack spacing={ResDimensions.cardColumnSpacing} style={{ width: componentWidth, alignItems: 'flex-start' }}>\n            <BasicCard \n                title=\"Being a Developer\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>\n                    {\"I know all the basic skills you would expect a developer to have such as git and source control, IDE tools, development practices, etc. I'm experienced in many different areas of development including UI, 3D computer graphics, 2D computer graphics, thread management, interacting with webservices, applied mathematics, data persistence, databases, package management, localisation, and more.\"}\n                </ResText>\n            </BasicCard>\n\n            <BasicCard \n                title=\"Native iOS Developemnt\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>\n                    {\"My primary area of expertise is native iOS development, having worked on an extensive number of both individual and team-based projects. Using Swift, I've built apps and packages using all kinds of frameworks including SwiftUI, UIKit, Core Graphics, SceneKit, Vision, AVFoundation, Speech, CoreVideo, CoreData, and more. I'm well versed in package management using Swift Packages and Cocoa Pods, developing unit tests, localisation, and working with the rest of the iOS ecosystem. I extensive experience in common app architectures such as MVVM and MVC, as well as design patterns such as the delegate pattern, publisher subscriber pattern, and so on.\"}\n                </ResText>\n            </BasicCard>\n\n            <BasicCard \n                title=\"React Native\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>\n                    {\"I have experience building React Native apps using expo (including this site!), having worked on both individual and team-based projects. Using TypeScript I've become familiar with the React Native ecosystem, having used redux architecture to develop multi-platform apps. Areas of experience include frontend development, interfacing with databases, localisation, and more.\"}\n                </ResText>\n            </BasicCard>\n\n            <BasicCard \n                title=\"Native Android\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>\n                    {\"I have experience building native Android apps in Kotlin and Java using XML Layouts. I'm formally educated in Android development (haven taken FIT2081) and have built two apps in team settings. I'm experienced in basic Android architecture, activity and fragment lifecycles, UI development, persisting data using Shared Preferences and Room, interacting with web services, and interfacing with accessibility services.\"}\n                </ResText>\n            </BasicCard>\n\n            <BasicCard \n                title=\"Creative Applications\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>\n                    {\"I greatly enjoy the practice of art and design and pursue it in my own time. I have experience in applications such as Adobe Photoshop, Adoble Illustrator, Adobe Premiere Pro, Audacity, Procreate (iPadOS graphics software), Figma, and more. Apart from considering design and usability in my applications, I also have a Behance portfolio linked above.\"}\n                </ResText>\n            </BasicCard>\n\n            <BasicCard \n                title=\"Python\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>\n                    {\"Sort of an outlier, but oddly enough I have a lot of experience with Python. I've used it in my own personal projects, in university projects, and for building scripts for processing and manipulating data. I have experience with Pandas, numpy, OpenCV, PIL, and a bunch more.\"}\n                </ResText>\n            </BasicCard>\n        </HStack>\n    );\n}\n\nexport default Skills;","import { View } from 'react-native';\nimport VStack from \"./containers/VStack\";\nimport { ExperiencePeriods } from '../data/experience/ExperiencePeriods';\nimport ExperienceSection from './custom/ExperienceSection';\nimport ResDimensions from './styling/ResDimensions';\nimport { useState } from 'react';\nimport { ActiveSection } from '../state/publishers/types/ActiveSection';\nimport StateManager from '../state/publishers/StateManager';\nimport { UnreachableCaseError } from '../language/errors/UnreachableCaseError';\nimport Header from './custom/Header';\nimport Splash from './custom/Splash';\nimport Education from './custom/Education';\nimport Skills from './custom/Skills';\n\nconst MainScreen: React.FC = () => {\n    const [activeSection, setActiveSection] = useState(StateManager.activeSection.read());\n\n    StateManager.activeSection.subscribe(() => {\n        setActiveSection(StateManager.activeSection.read());\n    });\n\n    const renderPageContent = () => {\n        switch (activeSection) {\n            case ActiveSection.none:\n                return <></>\n            case ActiveSection.experience:\n                return ExperiencePeriods().map((period) => (\n                    <ExperienceSection period={period} key={period.label} />\n                ));\n            case ActiveSection.skills:\n                return <Skills />\n            case ActiveSection.education:\n                return <Education />\n            default:\n                throw new UnreachableCaseError(activeSection);\n        }\n    };\n\n    return (\n        <View style={{ padding: ResDimensions.screenPadding }}>\n            <VStack spacing={ResDimensions.mainScreenSpacing} style={{ alignContent: 'center' }}>\n                <Header />\n\n                <Splash />\n            </VStack>\n\n            <VStack spacing={ResDimensions.pageContentSpacing} style={{ alignContent: 'center', paddingTop: ResDimensions.mainScreenSpacing }}>\n                {renderPageContent()}\n            </VStack>\n        </View>\n    );\n}\n\nexport default MainScreen;","import ExperiencePeriod from \"./ExperiencePeriod\"\nimport { Experiences } from \"./Experiences\"\n\nexport const ExperiencePeriods: () => ExperiencePeriod[] = () => {\n    let result: ExperiencePeriod[] = [];\n    for (let experience of Experiences) {\n        let added = false;\n        for (let section of result) {\n            if (section.label == experience.section) {\n                section.experiences.push(experience);\n                added = true;\n                break;\n            }\n        }\n        if (!added) {\n            result.push(new ExperiencePeriod(experience.section, [experience]));\n        }\n    }\n    result.sort((a, b) => {\n        // Compare the types\n        const aIsString = typeof a.label === \"string\";\n        const bIsString = typeof b.label === \"string\";\n        \n        // Strings go at the top\n        if (aIsString && !bIsString) {\n          return -1;\n        }\n        if (!aIsString && bIsString) {\n          return 1;\n        }\n        \n        // Numbers are sorted in decreasing order\n        if (typeof a.label === \"number\" && typeof b.label === \"number\") {\n          return (b.label as number) - (a.label as number);\n        }\n        \n        // Preserve the original order if both values are not strings or numbers\n        return 0;\n    });\n    return result;\n}","import { View } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { ResFont } from './src/components/styling/typography/ResFont';\nimport { useFonts } from 'expo-font';\nimport { useCallback } from 'react';\nimport { DefaultTheme, Provider as PaperProvider } from 'react-native-paper';\nimport MainScreen from './src/components/MainScreen';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n    const [fontsLoaded] = useFonts({\n        [ResFont.poppinsMedium]: require('./assets/fonts/Poppins-Medium.ttf'),\n        [ResFont.poppinsSemiBold]: require('./assets/fonts/Poppins-SemiBold.ttf'),\n        [ResFont.poppinsBold]: require('./assets/fonts/Poppins-Bold.ttf'),\n        [ResFont.poppinsMediumItalic]: require('./assets/fonts/Poppins-MediumItalic.ttf'),\n        [ResFont.poppinsSemiBoldItalic]: require('./assets/fonts/Poppins-SemiBoldItalic.ttf'),\n        [ResFont.poppinsBoldItalic]: require('./assets/fonts/Poppins-BoldItalic.ttf'),\n        [ResFont.circularMedium]: require('./assets/fonts/CircularStd-Medium.otf'),\n        [ResFont.circularBold]: require('./assets/fonts/CircularStd-Bold.otf'),\n        [ResFont.circularBlack]: require('./assets/fonts/CircularStd-Black.otf'),\n        [ResFont.circularMediumItalic]: require('./assets/fonts/CircularStd-MediumItalic.otf'),\n        [ResFont.circularBoldItalic]: require('./assets/fonts/CircularStd-BoldItalic.otf'),\n        [ResFont.circularBlackItalic]: require('./assets/fonts/CircularStd-BlackItalic.otf'),\n        [ResFont.plexMonoMedium]: require('./assets/fonts/IBMPlexMono-Medium.ttf'),\n        [ResFont.plexMonoSemiBold]: require('./assets/fonts/IBMPlexMono-SemiBold.ttf'),\n        [ResFont.plexMonoBold]: require('./assets/fonts/IBMPlexMono-Bold.ttf'),\n        [ResFont.plexMonoMediumItalic]: require('./assets/fonts/IBMPlexMono-MediumItalic.ttf'),\n        [ResFont.plexMonoSemiBoldItalic]: require('./assets/fonts/IBMPlexMono-SemiBoldItalic.ttf'),\n        [ResFont.plexMonoBoldItalic]: require('./assets/fonts/IBMPlexMono-BoldItalic.ttf'),\n        [ResFont.gilroyExtraBold]: require('./assets/fonts/Gilroy-ExtraBold.otf'),\n    });\n\n    const onLayoutRootView = useCallback(async () => {\n        if (fontsLoaded) {\n            await SplashScreen.hideAsync();\n        }\n    }, [fontsLoaded]);\n\n    if (!fontsLoaded) {\n        return null;\n    }\n\n    return (\n        <PaperProvider theme={theme}>\n            <View onLayout={onLayoutRootView} style={{ flex: 1 }}>\n                <MainScreen />\n            </View>\n        </PaperProvider>\n    );\n}\n\nconst theme = {\n    ...DefaultTheme,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/Resume/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [465], () => (__webpack_require__(9484)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ResFont","VStack","_ref","children","_ref$spacing","spacing","_ref$horizontalSpacin","horizontalSpacing","onLayout","style","_jsx","View","styles","container","columnGap","rowGap","StyleSheet","create","flexDirection","flexWrap","propTypes","PropTypes","isRequired","defaultProps","_createClass","ExperiencePeriod","label","experiences","_classCallCheck","Download","fileName","Link","shownURL","url","Experience","name","section","projectType","duration","description","links","files","tags","key","get","this","Experiences","UnreachableCaseError","_Error","_inherits","_super","_createSuper","val","call","JSON","stringify","_wrapNativeSuper","AssertionError","message","assert","condition","ResFontWeight","ResFontFamilyConfig","regular","semiBold","bold","black","italic","semiBoldItalic","boldItalic","blackItalic","value","weight","isItalic","ResFontFamily","getConfig","family","poppins","poppinsMedium","poppinsSemiBold","poppinsBold","poppinsMediumItalic","poppinsSemiBoldItalic","poppinsBoldItalic","circular","circularMedium","circularBold","circularBlack","circularMediumItalic","circularBoldItalic","circularBlackItalic","plexMono","plexMonoMedium","plexMonoSemiBold","plexMonoBold","plexMonoMediumItalic","plexMonoSemiBoldItalic","plexMonoBoldItalic","gilroy","gilroyExtraBold","typography","_ref$verticalWrap","verticalWrap","_ref$wide","wide","lineHeightMultiplier","fontFamily","Text","width","alignSelf","getStylesheet","lineHeight","size","HStack","_ref$verticalSpacing","verticalSpacing","OS","toString","os","ios","android","windows","macos","web","other","ScreenType","screenType","mobile","large","ColorScheme","scheme","dark","light","ResScreenOrientation","Environment","Appearance","getColorScheme","Platform","getOS","isPad","dimensions","getScreenDimensions","Landscape","Potrait","Dimensions","height","instance","ResColor","lightMode","darkMode","hexRegex","setDarkMode","test","colorScheme","hex","getColor","slice","length","parseInt","ResColors","ResTypographyConfig","color","arguments","undefined","underlined","linedOut","kerning","resColor","getFont","_this$resColor","result","trimStart","font","fontSize","textDecorationLine","lineStyle","letterSpacing","ResTypography","textDark","textSemiDark","textLight","sectionTitle","_jsxs","alignItems","ResText","flex","flexGrow","backgroundColor","ResDimensions","screenPadding","cardPadding","fillRadius","mainScreenSpacing","pageContentSpacing","cardColumnSpacing","bodyParagraphSpacing","tagSpacing","iconButtonSize","iconButtonSpacing","borderRadius","padding","_ref$onPress","onPress","TouchableOpacity","disabled","handlePress","React","Linking","openURL","paddingVertical","paddingHorizontal","_ref$icon","icon","_ref$disabled","justifyContent","opacity","Icon","experience","FlatContainer","fillBackgroundLight","_objectSpread","header","paddingTop","subscript","subscriptText","body","link","ResHyperlink","_Fragment","file","ResSmallButton","buttonSmall","behance","fileUrl","require","document","createElement","href","download","click","error","console","tag","ResChip","chip","ResValuePublisher","initialState","createSlice","reducers","publishAction","state","newValue","payload","publisher","configureStore","reducer","callback","subscribe","dispatch","actions","getState","ActiveSection","StateManager","activeSection","none","contentWidth","period","_useState","useState","getScreenWidth","_useState2","_slicedToArray","screenIsPortrait","setScreenIsPortrait","_useState3","read","_useState4","componentWidth","setComponentWidth","useEffect","addEventListener","newDimensions","columnCount","gap","YearHeader","ExperienceCard","ResImageScale","_ref$width","_ref$height","_ref$scale","scale","setSize","resizeMode","setResizeMode","_useState5","_useState6","imageSize","setImageSize","imagePath","Image","getSize","log","scaleToFill","scaleToFit","scaleToFillCrop","source","aspectRatio","_objectDestructuringEmpty","ResImage","pageTitle","_ref$fileName","ResIcon","paddingBottom","ResIconButton","position","top","subscriptLabel","textAlign","splash","maxWidth","standoutBody","ResIconButtonLabelled","gitHub","linkedIn","shadow","shadowColor","shadowOffset","shadowOpacity","shadowRadius","setActiveSection","selectedTypography","button","unselectedTypography","ResButton","toPublish","publish","horizontalButtonSpacing","Math","sqrt","pow","verticalButtonSpacing","event","layout","nativeEvent","SplashIntro","SplashButton","skills","education","title","downloadAcademicTranscript","_ref2","_asyncToGenerator","apply","BasicCard","alignContent","Header","Splash","added","push","sort","a","b","aIsString","bIsString","ExperiencePeriods","ExperienceSection","Skills","Education","renderPageContent","App","_useFonts3","_useFonts","useFonts","_defineProperty","fontsLoaded","onLayoutRootView","useCallback","SplashScreen","PaperProvider","theme","MainScreen","DefaultTheme","__webpack_module_cache__","moduleId","cachedModule","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","n","getter","__esModule","d","definition","defineProperty","enumerable","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}