{"version":3,"file":"static/js/main.ae440948.js","mappings":"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","sources":["assets/files|sync|/^/.//.*$","assets/images|sync|/^/.//.*$","src/language/errors/AssertionError.ts","src/language/assertions/Assert.ts","src/language/errors/UnreachableCaseError.ts","src/state/types/ColorScheme.ts","src/components/styling/color/ResColor.ts","src/components/styling/ResColors.ts","src/state/types/OS.ts","src/state/types/ResScreenOrientation.ts","src/state/types/ScreenType.ts","src/state/environment/Environment.ts","src/state/publishers/impl/ResValuePublisher.ts","src/state/publishers/types/ActiveSection.ts","src/state/publishers/StateManager.ts","src/components/styling/typography/ResFont.ts","src/components/styling/typography/ResFontWeight.ts","src/components/styling/typography/ResFontFamilyConfig.ts","src/components/styling/typography/ResFontFamily.ts","src/components/base/ResText/ResText.tsx","src/components/styling/typography/ResTypographyConfig.ts","src/components/styling/ResTypography.ts","src/components/navigation/NavHeader.tsx","src/components/navigation/LinearNavigator.tsx","src/components/containers/VStack.tsx","src/components/styling/ResDimensions.ts","src/components/custom/ContentContainer.tsx","src/components/base/ResButton/ResSmallButton.tsx","src/components/base/ResHyperlink/ResHyperlink.tsx","src/components/containers/HStack.tsx","src/components/containers/FlatContainer.tsx","src/components/custom/BasicCard.tsx","src/components/custom/Education.tsx","src/components/screens/EducationScreen.tsx","src/data/experience/ExperiencePeriod.ts","src/data/Download.ts","src/data/Link.ts","src/data/experience/Experience.ts","src/data/experience/Experiences.ts","src/data/experience/ExperiencePeriods.ts","src/components/base/ResChip/ResChip.tsx","src/components/base/ResImage/ResImageScale.ts","src/components/base/ResImage/ResImage.tsx","src/components/custom/ExperienceCard.tsx","src/components/custom/YearHeader.tsx","src/components/custom/ExperienceSection.tsx","src/components/custom/Experience.tsx","src/components/screens/ExperienceScreen.tsx","src/components/base/ResIcon/ResIcon.tsx","src/components/base/ResIconButton/ResIconButton.tsx","src/components/custom/Header.tsx","src/components/custom/Skills.tsx","src/components/base/ResButton/ResButton.tsx","src/components/custom/SplashButton.tsx","src/components/custom/SplashButtonMobile.tsx","src/components/base/ResIconButtonLabelled/ResIconButtonLabelled.tsx","src/components/custom/SplashIntro.tsx","src/components/custom/Splash.tsx","src/components/screens/MainScreen.tsx","src/components/screens/SkillsScreen.tsx","src/components/navigation/NavScreen.tsx","src/components/navigation/MainNavStack.tsx","src/components/navigation/NavStack.tsx","src/components/providers/ColorProvider.tsx","App.tsx","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["var map = {\n\t\"./academic_transcript_unofficial.pdf\": 5637,\n\t\"./cpd_supporting_document_cerulean_labs.pdf\": 5346,\n\t\"./honour_list_inclusions.zip\": 3412,\n\t\"./letters_of_commendation.zip\": 9985,\n\t\"./user_guide_teach_me_talkback.pdf\": 6294\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 5149;","var map = {\n\t\"./auslanspell_icon.png\": 2092,\n\t\"./beesly_icon.png\": 7934,\n\t\"./behance_black.png\": 8686,\n\t\"./behance_white.png\": 5719,\n\t\"./codesign_icon.png\": 7061,\n\t\"./moon.png\": 398,\n\t\"./portfolio_icon.png\": 6552,\n\t\"./profile_picture.png\": 7804,\n\t\"./profile_picture_no_background.png\": 9276,\n\t\"./sun.png\": 1027,\n\t\"./yonder_icon.png\": 2472\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 3598;","/**\n * To be thrown in assertion statements\n * Refer to Assert.ts and AssertionFailure.ts\n */\nexport class AssertionError extends Error {\n    constructor(message: string) {\n        super(`[ASSERTION ERROR] ${message}`);\n    }\n}\n","import { AssertionError } from \"../errors/AssertionError\";\n\n/**\n * Performs an assertion for debugging at runtime\n *\n * @param condition The condition to be tested\n * @param message The message to output if the condition fails\n */\nexport function assert(condition: boolean, message: string) {\n    if (!condition) {\n        throw new AssertionError(message);\n    }\n}\n","/**\n * Throw this error in the case where an area of code shouldn't be capable of being reached.\n * For instance, in the default block of a switch statement that should be exhaustively checking an enum.\n *\n * ```\n * switch (primaryColor) {\n *     case PrimaryColor.red:\n *         console.log(\"RED!\");\n *         break;\n *     case PrimaryColor.blue:\n *         console.log(\"BLUE!\");\n *         break;\n *     case PrimaryColor.yellow:\n *         console.log(\"YELLOW!\");\n *         break;\n *     case default:\n *         throw new UnreachableCaseError(primaryColor);\n * }\n * ```\n */\nexport class UnreachableCaseError extends Error {\n    constructor(val: never) {\n        super(`[UNREACHABLE CASE ERROR] Unreachable case '${JSON.stringify(val)}'`);\n    }\n}\n","import { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\n\nexport enum ColorScheme {\n    dark,\n    light,\n}\n\nexport namespace ColorScheme {\n    export function toString(scheme: ColorScheme): string {\n        switch (scheme) {\n            case ColorScheme.dark:\n                return \"Dark Mode\";\n            case ColorScheme.light:\n                return \"Light Mode\";\n            default:\n                throw new UnreachableCaseError(scheme);\n        }\n    }\n}\n","import { assert } from \"../../../language/assertions/Assert\";\nimport { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\nimport StateManager from \"../../../state/publishers/StateManager\";\nimport { ColorScheme } from \"../../../state/types/ColorScheme\";\n\nclass ResColor {\n    // Hex string\n    private readonly lightMode: string;\n    // Hex string\n    private readonly darkMode: string;\n\n    constructor(lightMode: string, darkMode?: string) {\n        const hexRegex = /^#[0-9a-fA-F]+$/;\n        // If no dark mode is provided, dark mode / light mode is equivalent\n        let setDarkMode = darkMode || lightMode;\n        assert(hexRegex.test(lightMode), `Invalid lightMode hex color string provided: '${lightMode}'`);\n        assert(hexRegex.test(setDarkMode), `Invalid darkMode hex color string provided: '${setDarkMode}'`);\n        this.lightMode = lightMode;\n        this.darkMode = setDarkMode;\n    }\n\n    /**\n     * Gets the color based on the user's active color scheme (light mode / dark mode)\n     *\n     * @returns Validated color string\n     */\n    public getColor(): string {\n        let colorScheme = StateManager.colorScheme.read();\n        switch (colorScheme) {\n            case ColorScheme.dark:\n                return this.darkMode;\n            case ColorScheme.light:\n                return this.lightMode;\n            default:\n                throw new UnreachableCaseError(colorScheme);\n        }\n    }\n\n    public getContrastColor(): string {\n        let hex = this.getColor();\n        hex = hex.slice(1); // Remove \"#\"\n        // convert 3-digit hex to 6-digits.\n        if (hex.length === 3) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n        assert(hex.length === 6, \"Invalid hex color found\");\n        let r = parseInt(hex.slice(0, 2), 16),\n            g = parseInt(hex.slice(2, 4), 16),\n            b = parseInt(hex.slice(4, 6), 16);\n        return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? \"#000000\" : \"#FFFFFF\";\n    }\n}\n\nexport default ResColor;\n","import ResColor from \"./color/ResColor\";\n\n/**\n * Predefined colors to be used application-wide.\n * Colors are defined with a light-mode and an optional dark-mode variant.\n * Colors should be named using light-mode convention, that is, colors should be named according to how they should be read in light mode. \"Dark text\" is text that is dark in light mode, and light in dark mode.\n */\nclass ResColors {\n    static get accent(): ResColor {\n        return new ResColor(\"#1769ff\");\n    }\n\n    static get textLightPersistent(): ResColor {\n        return new ResColor(\"#f8f9fa\");\n    }\n\n    static get background(): ResColor {\n        return new ResColor(\"#ffffff\", \"#17171c\");\n    }\n\n    static get textDark(): ResColor {\n        return new ResColor(\"#3f4169\", \"#e5e5f3\");\n    }\n\n    static get textSemiDark(): ResColor {\n        return new ResColor(\"#a6a8c5\", \"#818182\");\n    }\n\n    static get textLight(): ResColor {\n        return new ResColor(\"#f8f9fa\", \"#000000\");\n    }\n\n    static get fillBackgroundLight(): ResColor {\n        return new ResColor(\"#f2f3f9\", \"#27272f\");\n    }\n\n    static get fillBackgroundDark(): ResColor {\n        return new ResColor(\"#3f4169\", \"#e0e1e7\");\n    }\n\n    static get chipBackground(): ResColor {\n        return new ResColor(\"#3f4169\", \"#454552\");\n    }\n\n    static get behance(): ResColor {\n        return new ResColor(\"#1769ff\");\n    }\n\n    static get gitHub(): ResColor {\n        return new ResColor(\"#24292f\", \"#3f4169\");\n    }\n\n    static get linkedIn(): ResColor {\n        return new ResColor(\"#2d64bc\");\n    }\n}\n\nexport default ResColors;\n","import { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\n\nexport enum OS {\n    ios,\n    android,\n    web,\n    windows,\n    macos,\n    other,\n}\n\nexport namespace OS {\n    export function toString(os: OS): string {\n        switch (os) {\n            case OS.ios:\n                return \"iOS\";\n            case OS.android:\n                return \"Android\";\n            case OS.windows:\n                return \"Windows\";\n            case OS.macos:\n                return \"macOS\";\n            case OS.web:\n                return \"Web\";\n            case OS.other:\n                return \"Unknown\";\n            default:\n                throw new UnreachableCaseError(os);\n        }\n    }\n}\n","export enum ResScreenOrientation {\n    Potrait = \"Potrait\",\n    Landscape = \"Landscape\",\n}\n","import { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\n\nexport enum ScreenType {\n    mobile,\n    large,\n}\n\nexport namespace ScreenType {\n    export function toString(screenType: ScreenType): string {\n        switch (screenType) {\n            case ScreenType.mobile:\n                return \"Mobile\";\n            case ScreenType.large:\n                return \"Large\";\n            default:\n                throw new UnreachableCaseError(screenType);\n        }\n    }\n}\n","import { Appearance, Dimensions, Platform, PlatformIOSStatic } from \"react-native\";\nimport { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\nimport { ColorScheme } from \"../types/ColorScheme\";\nimport { OS } from \"../types/OS\";\nimport { ResScreenOrientation } from \"../types/ResScreenOrientation\";\nimport { ScreenType } from \"../types/ScreenType\";\n\nclass Environment {\n    public static readonly instance = new Environment();\n\n    private constructor() {}\n\n    public getDeviceColorScheme(): ColorScheme {\n        // TODO: I can't get this to change correctly\n        const colorScheme = Appearance.getColorScheme();\n        switch (colorScheme) {\n            case \"dark\":\n                return ColorScheme.dark;\n            case \"light\":\n                return ColorScheme.light;\n            default:\n                return ColorScheme.light;\n        }\n    }\n\n    public getOS(): OS {\n        switch (Platform.OS) {\n            case \"android\":\n                return OS.android;\n            case \"ios\":\n                return OS.ios;\n            case \"windows\":\n                return OS.windows;\n            case \"macos\":\n                return OS.macos;\n            case \"web\":\n                return OS.web;\n            default:\n                return OS.other;\n        }\n    }\n\n    public getScreenType(): ScreenType {\n        const os = this.getOS();\n        switch (os) {\n            case OS.ios:\n                return (Platform as PlatformIOSStatic).isPad ? ScreenType.large : ScreenType.mobile;\n            case OS.android:\n                // TODO: Figure out how to detect Android tablets\n                return ScreenType.mobile;\n            case OS.windows:\n            case OS.macos:\n                return ScreenType.large;\n            case OS.web:\n            case OS.other:\n                const dimensions = this.getScreenDimensions();\n                if (dimensions[1] > dimensions[0]) {\n                    // Height > width, assume mobile\n                    return ScreenType.mobile;\n                }\n                // Any landscape screen on a web client can be assumed to be on a large screen\n                return ScreenType.large;\n            default:\n                throw new UnreachableCaseError(os);\n        }\n    }\n\n    public getScreenOrientation(): ResScreenOrientation {\n        const dimensions = this.getScreenDimensions();\n        if (dimensions[0] > dimensions[1]) {\n            return ResScreenOrientation.Landscape;\n        }\n        return ResScreenOrientation.Potrait;\n    }\n\n    public getAspectRatio(): number {\n        const dimensions = this.getScreenDimensions();\n        return dimensions[0] / dimensions[1];\n    }\n\n    public screenIsPortrait(): boolean {\n        return this.getScreenWidth() <= 950;\n    }\n\n    public getScreenWidth(): number {\n        return Dimensions.get(\"window\").width;\n    }\n\n    public getScreenHeight(): number {\n        return Dimensions.get(\"window\").height;\n    }\n\n    private getScreenDimensions(): [number, number] {\n        return [Dimensions.get(\"window\").width, Dimensions.get(\"window\").height];\n    }\n}\n\nexport default Environment;\n","import { Draft, PayloadAction, configureStore, createSlice } from \"@reduxjs/toolkit\";\n\n/**\n * A redux wrapper for managing application-wide state using the publisher-subscriber pattern.\n * The class contains the state value (generic type) to be read.\n * To only be initialised within StateManager.\n */\nclass ResValuePublisher<Type> {\n    private readonly slice;\n    private readonly publisher;\n\n    constructor(initialState: Type) {\n        this.slice = createSlice({\n            name: \"ResValuePublisher\",\n            initialState: {\n                value: initialState,\n            },\n            reducers: {\n                publishAction: (state, newValue: PayloadAction<Draft<Type>>) => {\n                    state.value = newValue.payload;\n                },\n            },\n        });\n\n        this.publisher = configureStore({\n            reducer: this.slice.reducer,\n        });\n    }\n\n    /*\n    // EXAMPLE\n\n    useEffect(() => {\n        const unsubscribe = StateManager.somePublisher.subscribe(() => {\n            console.log(\"Received!\");\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n    */\n    public subscribe(callback: () => void): () => void {\n        return this.publisher.subscribe(callback);\n    }\n\n    public publish(value: Type) {\n        this.publisher.dispatch(this.slice.actions.publishAction(value));\n    }\n\n    public read(): Type {\n        return this.publisher.getState().value;\n    }\n}\n\nexport default ResValuePublisher;\n","export enum ActiveSection {\n    none,\n    experience,\n    skills,\n    education,\n}\n","import ResColors from \"../../components/styling/ResColors\";\nimport Environment from \"../environment/Environment\";\nimport { ColorScheme } from \"../types/ColorScheme\";\nimport ResValuePublisher from \"./impl/ResValuePublisher\";\nimport { ActiveSection } from \"./types/ActiveSection\";\n\n/**\n * Stores application-level state to avoid having to pass state to different components, and reduces component coupling. Uses the publisher-subscriber pattern.\n *\n * To define value-less state, statically instantiate a ResPublisher.\n * ``` public static readonly myState = new ResPublisher(); ```\n * To publish to that state, call the publish method. This would be done in a component.\n * ``` StateManager.myState.publish(); ```\n * Any component can subscribe. Every time the state is published, a callback is called.\n * ```\n * const unsubscribe = StateManager.myState.subscribe(() => {\n *     // React to the state change, e.g. update hooks or call forceUpdate()\n * });\n *\n * // Note: call unsubscribe() when component is unmounted\n * ```\n * All subscriptions should occur in useEffect hooks, since we only want the the component to subscribe on mount.\n *\n * To define a state with value, statically instantiate a ResValuePublisher.\n * ``` public static readonly loginStatus = new ResValuePublisher(LoginStatus.loggedOut); ```\n * To publish to that state, a value must be passed to the publish method. This would be done in a component.\n * ``` StateManager.loginStatus.publish(LoginStatus.worker); ```\n * Any component can subscribe. Every time the state is published, a callback is called.\n * ```\n * StateManager.loginStatus.subscribe(() => {\n *     // We can read the state value\n *     let stateValue: LoginStatus = StateManager.loginStatus.read();\n *\n *     // React to the state change, e.g. update hooks or call forceUpdate()\n * });\n *\n * // Note: call unsubscribe() when component is unmounted\n * ```\n */\nclass StateManager {\n    public static readonly activeSection = new ResValuePublisher(ActiveSection.none);\n\n    public static readonly contentWidth = new ResValuePublisher(0.0);\n\n    public static readonly backgroundColor = new ResValuePublisher<string | undefined>(undefined);\n\n    public static readonly colorScheme = new ResValuePublisher(ColorScheme.light);\n\n    public static setup() {\n        // Init default values whilst avoiding circular dependencies\n        StateManager.colorScheme.publish(Environment.instance.getDeviceColorScheme());\n        StateManager.backgroundColor.publish(ResColors.background.getColor());\n\n        // Setup state that depends on other state\n        StateManager.colorScheme.subscribe(() => {\n            StateManager.backgroundColor.publish(ResColors.background.getColor());\n        });\n    }\n}\n\nexport default StateManager;\n\n// Setup after export, otherwise circular depenencies occur\nStateManager.setup();\n","export enum ResFont {\n    poppinsMedium = \"Poppins-Medium\",\n    poppinsSemiBold = \"Poppins-SemiBold\",\n    poppinsBold = \"Poppins-Bold\",\n    poppinsMediumItalic = \"Poppins-MediumItalic\",\n    poppinsSemiBoldItalic = \"Poppins-SemiBoldItalic\",\n    poppinsBoldItalic = \"Poppins-BoldItalic\",\n    circularMedium = \"CircularStd-Medium\",\n    circularBold = \"CircularStd-Bold\",\n    circularBlack = \"CircularStd-Black\",\n    circularMediumItalic = \"CircularStd-MediumItalic\",\n    circularBoldItalic = \"CircularStd-BoldItalic\",\n    circularBlackItalic = \"CircularStd-BlackItalic\",\n    plexMonoMedium = \"IBMPlexMono-Medium\",\n    plexMonoSemiBold = \"IBMPlexMono-SemiBold\",\n    plexMonoBold = \"IBMPlexMono-Bold\",\n    plexMonoMediumItalic = \"IBMPlexMono-MediumItalic\",\n    plexMonoSemiBoldItalic = \"IBMPlexMono-SemiBoldItalic\",\n    plexMonoBoldItalic = \"IBMPlexMono-BoldItalic\",\n    gilroyExtraBold = \"Gilroy-ExtraBold\",\n}\n","export enum ResFontWeight {\n    regular,\n    semiBold,\n    bold,\n    black,\n}\n","import { assert } from \"../../../language/assertions/Assert\";\nimport { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\nimport { ResFont } from \"./ResFont\";\nimport { ResFontWeight } from \"./ResFontWeight\";\n\nclass ResFontFamilyConfig {\n    private readonly regular: ResFont | null;\n    private readonly semiBold: ResFont | null;\n    private readonly bold: ResFont | null;\n    private readonly black: ResFont | null;\n    private readonly italic: ResFont | null;\n    private readonly semiBoldItalic: ResFont | null;\n    private readonly boldItalic: ResFont | null;\n    private readonly blackItalic: ResFont | null;\n\n    constructor(\n        regular: ResFont | null,\n        semiBold: ResFont | null,\n        bold: ResFont | null,\n        black: ResFont | null,\n        italic: ResFont | null,\n        semiBoldItalic: ResFont | null,\n        boldItalic: ResFont | null,\n        blackItalic: ResFont | null,\n    ) {\n        this.regular = regular;\n        this.semiBold = semiBold;\n        this.bold = bold;\n        this.black = black;\n        this.italic = italic;\n        this.semiBoldItalic = semiBoldItalic;\n        this.boldItalic = boldItalic;\n        this.blackItalic = blackItalic;\n    }\n\n    public getFont(weight: ResFontWeight, isItalic: boolean): ResFont {\n        switch (weight) {\n            case ResFontWeight.regular:\n                let regular = isItalic ? this.italic : this.regular;\n                assert(regular != null, \"Font requested not provided/available\");\n                return regular!;\n            case ResFontWeight.semiBold:\n                let semiBold = isItalic ? this.semiBoldItalic : this.semiBold;\n                assert(semiBold != null, \"Font requested not provided/available\");\n                return semiBold!;\n            case ResFontWeight.bold:\n                let bold = isItalic ? this.boldItalic : this.bold;\n                assert(bold != null, \"Font requested not provided/available\");\n                return bold!;\n            case ResFontWeight.black:\n                let black = isItalic ? this.blackItalic : this.black;\n                assert(black != null, \"Font requested not provided/available\");\n                return black!;\n            default:\n                throw new UnreachableCaseError(weight);\n        }\n    }\n}\n\nexport default ResFontFamilyConfig;\n","import { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\nimport { ResFont } from \"./ResFont\";\nimport ResFontFamilyConfig from \"./ResFontFamilyConfig\";\n\nexport enum ResFontFamily {\n    poppins,\n    circular,\n    plexMono,\n    gilroy,\n}\n\nexport namespace ResFontFamily {\n    export function getConfig(family: ResFontFamily): ResFontFamilyConfig {\n        switch (family) {\n            case ResFontFamily.poppins:\n                return new ResFontFamilyConfig(\n                    ResFont.poppinsMedium,\n                    ResFont.poppinsSemiBold,\n                    ResFont.poppinsBold,\n                    null,\n                    ResFont.poppinsMediumItalic,\n                    ResFont.poppinsSemiBoldItalic,\n                    ResFont.poppinsBoldItalic,\n                    null,\n                );\n            case ResFontFamily.circular:\n                return new ResFontFamilyConfig(\n                    ResFont.circularMedium,\n                    null,\n                    ResFont.circularBold,\n                    ResFont.circularBlack,\n                    ResFont.circularMediumItalic,\n                    null,\n                    ResFont.circularBoldItalic,\n                    ResFont.circularBlackItalic,\n                );\n            case ResFontFamily.plexMono:\n                return new ResFontFamilyConfig(\n                    ResFont.plexMonoMedium,\n                    ResFont.plexMonoSemiBold,\n                    ResFont.plexMonoBold,\n                    null,\n                    ResFont.plexMonoMediumItalic,\n                    ResFont.plexMonoSemiBoldItalic,\n                    ResFont.plexMonoBoldItalic,\n                    null,\n                );\n            case ResFontFamily.gilroy:\n                return new ResFontFamilyConfig(null, null, null, ResFont.gilroyExtraBold, null, null, null, null);\n            default:\n                throw new UnreachableCaseError(family);\n        }\n    }\n}\n","import React from \"react\";\nimport { Text, TextStyle } from \"react-native\";\nimport { ResFontFamily } from \"../../styling/typography/ResFontFamily\";\nimport ResTypographyConfig from \"../../styling/typography/ResTypographyConfig\";\n\ninterface Props {\n    // Text or other components to be embedded\n    children: any;\n    // Typography applied\n    typography: ResTypographyConfig;\n    // If the component should expand to take up available horizontal space\n    wide?: boolean | null;\n    // If the frame should exactly match the text\n    verticalWrap?: boolean;\n    // Number of lines (predefined)\n    numberOfLines?: number;\n    // Custom styling\n    style?: TextStyle;\n}\n\nconst ResText: React.FC<Props> = ({\n    children,\n    typography,\n    verticalWrap = false,\n    wide = true,\n    numberOfLines,\n    style,\n}) => {\n    // For some reason the poppins font is slightly offset\n    // This is a workaround\n    let lineHeightMultiplier = typography.fontFamily == ResFontFamily.poppins ? 1.15 : 1.0;\n    return (\n        <Text\n            numberOfLines={numberOfLines}\n            style={[\n                wide ? { width: \"100%\" } : { alignSelf: wide == undefined || wide == null ? undefined : \"center\" },\n                typography.getStylesheet(),\n                verticalWrap\n                    ? {\n                          lineHeight: typography.size * lineHeightMultiplier,\n                      }\n                    : null,\n                style,\n            ]}\n        >\n            {children}\n        </Text>\n    );\n};\n\nexport default ResText;\n","import { ResFontFamily } from \"./ResFontFamily\";\nimport ResFontFamilyConfig from \"./ResFontFamilyConfig\";\nimport { StyleSheet } from \"react-native\";\nimport { ResFontWeight } from \"./ResFontWeight\";\nimport ResColor from \"../color/ResColor\";\n\nclass ResTypographyConfig {\n    public size: number;\n    public fontFamily: ResFontFamily;\n    // An undefined color allows the component handle the color\n    public resColor: ResColor | undefined;\n    public weight: ResFontWeight;\n    public italic: boolean;\n    public underlined: boolean;\n    public linedOut: boolean;\n    public kerning: number;\n    get font(): string {\n        let config: ResFontFamilyConfig = ResFontFamily.getConfig(this.fontFamily);\n        return config.getFont(this.weight, this.italic);\n    }\n    get color(): string | undefined {\n        return this.resColor?.getColor();\n    }\n    get lineStyle(): \"none\" | \"underline\" | \"line-through\" | \"underline line-through\" {\n        let result = \"\";\n        if (!this.underlined && !this.linedOut) {\n            result = \"none\";\n        } else {\n            if (this.underlined) {\n                result = \"underline\";\n            }\n            if (this.linedOut) {\n                result = (result + \" line-through\").trimStart();\n            }\n        }\n        return result as \"none\" | \"underline\" | \"line-through\" | \"underline line-through\";\n    }\n\n    constructor(\n        size: number,\n        fontFamily: ResFontFamily,\n        color: ResColor | undefined,\n        weight: ResFontWeight = ResFontWeight.regular,\n        italic: boolean = false,\n        underlined: boolean = false,\n        linedOut: boolean = false,\n        kerning: number = 0,\n    ) {\n        this.size = size;\n        this.fontFamily = fontFamily;\n        this.resColor = color;\n        this.weight = weight;\n        this.italic = italic;\n        this.underlined = underlined;\n        this.linedOut = linedOut;\n        this.kerning = kerning;\n    }\n\n    public withSize(size: number): ResTypographyConfig {\n        this.size = size;\n        return this;\n    }\n\n    public withColor(color: ResColor): ResTypographyConfig {\n        this.resColor = color;\n        return this;\n    }\n\n    public withWeight(weight: ResFontWeight): ResTypographyConfig {\n        this.weight = weight;\n        return this;\n    }\n\n    public withItalic(italic: boolean): ResTypographyConfig {\n        this.italic = italic;\n        return this;\n    }\n\n    public withUnderline(underline: boolean): ResTypographyConfig {\n        this.underlined = underline;\n        return this;\n    }\n\n    public withLineOut(lineOut: boolean): ResTypographyConfig {\n        this.linedOut = lineOut;\n        return this;\n    }\n\n    public getStylesheet(): {} {\n        return StyleSheet.create({\n            typography: {\n                fontFamily: this.font,\n                color: this.color,\n                fontSize: this.size,\n                textDecorationLine: this.lineStyle,\n                letterSpacing: this.kerning,\n            },\n        }).typography;\n    }\n}\n\nexport default ResTypographyConfig;\n","import ResColors from \"./ResColors\";\nimport { ResFontFamily } from \"./typography/ResFontFamily\";\nimport { ResFontWeight } from \"./typography/ResFontWeight\";\nimport ResTypographyConfig from \"./typography/ResTypographyConfig\";\n\nclass ResTypography {\n    static get pageTitle(): ResTypographyConfig {\n        return new ResTypographyConfig(32, ResFontFamily.gilroy, ResColors.textDark, ResFontWeight.black);\n    }\n\n    static get splash(): ResTypographyConfig {\n        return new ResTypographyConfig(34, ResFontFamily.circular, ResColors.textDark, ResFontWeight.black);\n    }\n\n    static get standoutBody(): ResTypographyConfig {\n        return new ResTypographyConfig(16, ResFontFamily.plexMono, ResColors.textDark);\n    }\n\n    static get body(): ResTypographyConfig {\n        return new ResTypographyConfig(14, ResFontFamily.plexMono, ResColors.textDark);\n    }\n\n    static get subscript(): ResTypographyConfig {\n        return new ResTypographyConfig(14, ResFontFamily.plexMono, ResColors.textSemiDark);\n    }\n\n    static get subscriptLabel(): ResTypographyConfig {\n        return new ResTypographyConfig(11.5, ResFontFamily.plexMono, ResColors.textSemiDark);\n    }\n\n    static get chip(): ResTypographyConfig {\n        return new ResTypographyConfig(11.5, ResFontFamily.plexMono, ResColors.textLightPersistent);\n    }\n\n    static get button(): ResTypographyConfig {\n        return new ResTypographyConfig(15, ResFontFamily.plexMono, ResColors.textLight);\n    }\n\n    static get buttonSmall(): ResTypographyConfig {\n        return new ResTypographyConfig(14, ResFontFamily.plexMono, ResColors.textLight);\n    }\n\n    static get sectionTitle(): ResTypographyConfig {\n        return new ResTypographyConfig(26, ResFontFamily.gilroy, ResColors.textDark, ResFontWeight.black);\n    }\n\n    static get header(): ResTypographyConfig {\n        return new ResTypographyConfig(\n            31,\n            ResFontFamily.circular,\n            ResColors.textDark,\n            ResFontWeight.black,\n            false,\n            false,\n            false,\n            -0.5,\n        );\n    }\n}\n\nexport default ResTypography;\n","import React, { useEffect } from \"react\";\nimport { TouchableOpacity, View } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport ResText from \"../base/ResText/ResText\";\nimport ResTypography from \"../styling/ResTypography\";\n\ninterface Props {\n    title: string;\n    canGoBack: boolean;\n    navigation: any;\n}\n\nconst NavHeader: React.FC<Props> = ({ title, canGoBack, navigation }) => {\n    const [backgroundColor, setBackgroundColor] = React.useState<string | undefined>(\n        StateManager.backgroundColor.read(),\n    );\n\n    useEffect(() => {\n        const unsubscribe = StateManager.backgroundColor.subscribe(() => {\n            setBackgroundColor(StateManager.backgroundColor.read());\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    return (\n        <SafeAreaView edges={[\"top\"]} style={{ backgroundColor: backgroundColor }}>\n            <View\n                style={{\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    paddingHorizontal: 22,\n                    paddingTop: 22,\n                }}\n            >\n                {canGoBack ? (\n                    <TouchableOpacity\n                        onPress={navigation.goBack}\n                        style={{\n                            alignItems: \"center\",\n                            paddingRight: 6,\n                        }}\n                    >\n                        <Icon\n                            name={\"chevron-left\"}\n                            size={45}\n                            color={ResTypography.header.color}\n                            style={{ marginLeft: -10 }}\n                        />\n                    </TouchableOpacity>\n                ) : null}\n\n                <ResText typography={ResTypography.header}>{title}</ResText>\n            </View>\n        </SafeAreaView>\n    );\n};\n\nexport default NavHeader;\n","import { createStackNavigator } from \"@react-navigation/stack\";\nimport { useEffect, useState } from \"react\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport NavHeader from \"./NavHeader\";\nimport NavStack from \"./NavStack\";\n\ninterface Props {\n    stack: NavStack;\n}\n\nexport const LinearNavigator: React.FC<Props> = ({ stack }) => {\n    const Stack = createStackNavigator();\n    const globalOptions = {}; // Options that apply to all screens\n\n    const [refresh, setRefresh] = useState(false);\n    StateManager.colorScheme.subscribe(() => {\n        setRefresh(!refresh);\n    });\n\n    return (\n        <Stack.Navigator>\n            {stack.screens.map((screen, index) => {\n                return (\n                    <Stack.Screen\n                        key={screen.id}\n                        name={screen.id}\n                        component={screen.component}\n                        options={({ navigation }) => ({\n                            ...screen.options,\n                            ...globalOptions,\n                            cardStyle: { backgroundColor: StateManager.backgroundColor.read() },\n                            header: () =>\n                                screen.title == null ? (\n                                    <></>\n                                ) : (\n                                    <NavHeader title={screen.title} canGoBack={index > 0} navigation={navigation} />\n                                ),\n                        })}\n                    />\n                );\n            })}\n        </Stack.Navigator>\n    );\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { StyleSheet, View, ViewStyle } from \"react-native\";\n\ninterface Props {\n    children: any;\n    spacing?: number;\n    horizontalSpacing?: number;\n    onLayout?: (event: any) => void;\n    style?: ViewStyle;\n}\n\nconst VStack: React.FC<Props> = ({ children, spacing = 0, horizontalSpacing = undefined, onLayout, style }) => {\n    return (\n        <View\n            onLayout={onLayout}\n            style={[\n                styles.container,\n                { columnGap: horizontalSpacing == undefined ? spacing : horizontalSpacing, rowGap: spacing },\n                style,\n            ]}\n        >\n            {children}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: \"column\",\n        flexWrap: \"wrap\",\n    },\n});\n\nVStack.propTypes = {\n    children: PropTypes.node.isRequired,\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    spacing: PropTypes.number,\n};\n\nVStack.defaultProps = {\n    style: {},\n    spacing: 0,\n};\n\nexport default VStack;\n","/**\n * Dimensions to be used application-wide.\n */\nclass ResDimensions {\n    static readonly screenPadding = 35;\n\n    static readonly cardPadding = 18;\n\n    static readonly fillRadius = 16;\n\n    static readonly mainScreenSpacing = 68;\n\n    static readonly pageContentSpacing = 24;\n\n    static readonly cardColumnSpacing = 20;\n\n    static readonly bodyParagraphSpacing = 10;\n\n    static readonly tagSpacing = 10;\n\n    static readonly iconButtonSize = 40;\n\n    static readonly iconButtonSpacing = 28;\n}\n\nexport default ResDimensions;\n","import React from \"react\";\nimport { ViewStyle } from \"react-native\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport VStack from \"../containers/VStack\";\nimport ResDimensions from \"../styling/ResDimensions\";\n\ninterface Props {\n    children: any;\n    style?: ViewStyle;\n}\n\nconst ContentContainer: React.FC<Props> = ({ children, style }) => {\n    const onLayout = (event: any) => {\n        const layout = event.nativeEvent.layout;\n        if (layout.width > 0) {\n            // Only if this component is visible\n            StateManager.contentWidth.publish(Environment.instance.getScreenWidth() - ResDimensions.screenPadding * 2);\n        }\n    };\n\n    return (\n        <VStack\n            style={{\n                padding: ResDimensions.screenPadding,\n                ...style,\n            }}\n            onLayout={onLayout}\n        >\n            {children}\n        </VStack>\n    );\n};\n\nexport default ContentContainer;\n","import React from \"react\";\nimport { StyleProp, TouchableOpacity, ViewStyle } from \"react-native\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport ResColor from \"../../styling/color/ResColor\";\nimport ResTypographyConfig from \"../../styling/typography/ResTypographyConfig\";\nimport ResText from \"../ResText/ResText\";\n\ninterface Props {\n    label: string;\n    typography: ResTypographyConfig;\n    color: ResColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    disabled?: boolean;\n    wide?: boolean;\n    style?: StyleProp<ViewStyle>;\n    onPress: () => void;\n}\n\nconst ResSmallButton: React.FC<Props> = ({\n    label,\n    typography,\n    color,\n    icon = undefined,\n    disabled = false,\n    wide = true,\n    style,\n    onPress,\n}) => {\n    return (\n        <TouchableOpacity\n            onPress={disabled ? undefined : onPress}\n            style={[\n                {\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    paddingVertical: 6,\n                    paddingHorizontal: 14,\n                    borderRadius: 50,\n                    backgroundColor: color.getColor(),\n                    opacity: disabled ? 0.5 : 1,\n                },\n                wide ? { width: \"100%\" } : { alignSelf: \"center\" },\n                style,\n            ]}\n            disabled={disabled}\n        >\n            {icon && <Icon name={icon} size={16} color={color.getColor()} />}\n\n            <ResText typography={typography} wide={false}>\n                {label}\n            </ResText>\n        </TouchableOpacity>\n    );\n};\n\nexport default ResSmallButton;\n","import React from \"react\";\nimport { Linking, Text, TextStyle } from \"react-native\";\nimport { ResFontFamily } from \"../../styling/typography/ResFontFamily\";\nimport { ResFontWeight } from \"../../styling/typography/ResFontWeight\";\nimport ResTypographyConfig from \"../../styling/typography/ResTypographyConfig\";\n\ninterface Props {\n    // Text or other components to be embedded\n    children: any;\n    // The URL to open\n    url: string;\n    // Typography applied\n    typography: ResTypographyConfig;\n    // If the component should expand to take up available horizontal space\n    wide?: boolean;\n    // If the frame should exactly match the text\n    verticalWrap?: boolean;\n    // Custom styling\n    style?: TextStyle;\n}\n\nconst ResHyperlink: React.FC<Props> = ({ children, url, typography, verticalWrap = false, wide = true, style }) => {\n    let linkTypography = typography.withWeight(ResFontWeight.bold).withUnderline(true);\n\n    const handlePress = React.useCallback(() => {\n        Linking.openURL(url);\n    }, [url]);\n\n    // For some reason the poppins font is slightly offset\n    // This is a workaround\n    let lineHeightMultiplier = linkTypography.fontFamily == ResFontFamily.poppins ? 1.15 : 1.0;\n    return (\n        <Text\n            style={[\n                wide ? { width: \"100%\" } : { alignSelf: \"center\" },\n                linkTypography.getStylesheet(),\n                verticalWrap\n                    ? {\n                          lineHeight: linkTypography.size * lineHeightMultiplier,\n                      }\n                    : null,\n                style,\n            ]}\n            onPress={handlePress}\n        >\n            {children}\n        </Text>\n    );\n};\n\nexport default ResHyperlink;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { StyleSheet, View, ViewStyle } from \"react-native\";\n\ninterface Props {\n    children: any;\n    spacing?: number;\n    verticalSpacing?: number;\n    onLayout?: (event: any) => void;\n    style?: ViewStyle;\n}\n\nconst HStack: React.FC<Props> = ({ children, spacing = 0, verticalSpacing = undefined, onLayout, style }) => {\n    return (\n        <View\n            onLayout={onLayout}\n            style={[\n                styles.container,\n                { columnGap: spacing, rowGap: verticalSpacing == undefined ? spacing : verticalSpacing },\n                style,\n            ]}\n        >\n            {children}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n    },\n});\n\nHStack.propTypes = {\n    children: PropTypes.node.isRequired,\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    spacing: PropTypes.number,\n};\n\nHStack.defaultProps = {\n    style: {},\n    spacing: 0,\n};\n\nexport default HStack;\n","import React from \"react\";\nimport { StyleSheet, TouchableOpacity, View, ViewStyle } from \"react-native\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ResColor from \"../styling/color/ResColor\";\n\ninterface Props {\n    color: ResColor;\n    onPress?: () => void;\n    children: any; // No type - can be any component\n    style?: ViewStyle;\n}\n\nconst FlatContainer: React.FC<Props> = ({ color, onPress = undefined, children, style }) => {\n    // Touchable opacity stops the highlighting of text - remove it if it's not a button\n    return onPress == undefined ? (\n        <View style={[styles.container, { backgroundColor: color.getColor() }, style]}>{children}</View>\n    ) : (\n        <TouchableOpacity onPress={onPress} disabled={onPress == undefined}>\n            <View style={[styles.container, { backgroundColor: color.getColor() }, style]}>{children}</View>\n        </TouchableOpacity>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        borderRadius: ResDimensions.fillRadius,\n        padding: ResDimensions.cardPadding,\n    },\n});\n\nexport default FlatContainer;\n","import React from \"react\";\nimport { ViewStyle } from \"react-native\";\nimport ResText from \"../base/ResText/ResText\";\nimport FlatContainer from \"../containers/FlatContainer\";\nimport VStack from \"../containers/VStack\";\nimport ResColors from \"../styling/ResColors\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ResTypography from \"../styling/ResTypography\";\n\ninterface Props {\n    title: string;\n    children: any;\n    style?: ViewStyle;\n}\n\nconst BasicCard: React.FC<Props> = ({ title, children, style }) => {\n    return (\n        <FlatContainer color={ResColors.fillBackgroundLight} style={style}>\n            <VStack spacing={ResDimensions.bodyParagraphSpacing}>\n                <ResText typography={ResTypography.header}>{title}</ResText>\n\n                {children}\n            </VStack>\n        </FlatContainer>\n    );\n};\n\nexport default BasicCard;\n","import { useEffect, useState } from \"react\";\nimport { Dimensions, ViewStyle } from \"react-native\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport ResSmallButton from \"../base/ResButton/ResSmallButton\";\nimport ResHyperlink from \"../base/ResHyperlink/ResHyperlink\";\nimport ResText from \"../base/ResText/ResText\";\nimport HStack from \"../containers/HStack\";\nimport ResColors from \"../styling/ResColors\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ResTypography from \"../styling/ResTypography\";\nimport BasicCard from \"./BasicCard\";\nimport VGap from \"../containers/layout/VGap\";\n\ninterface Props {\n    style?: ViewStyle;\n}\n\nconst Education: React.FC<Props> = ({ style }) => {\n    const [screenIsPortrait, setScreenIsPortrait] = useState(Environment.instance.screenIsPortrait());\n    const [componentWidth, setComponentWidth] = useState(StateManager.contentWidth.read());\n\n    useEffect(() => {\n        Dimensions.addEventListener(\"change\", (newDimensions) => {\n            setScreenIsPortrait(Environment.instance.screenIsPortrait());\n        });\n\n        const unsubscribe = StateManager.contentWidth.subscribe(() => {\n            setComponentWidth(StateManager.contentWidth.read());\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    let columnCount = screenIsPortrait ? 1 : 2;\n    let gap = (columnCount - 1) * ResDimensions.cardColumnSpacing;\n\n    const downloadAcademicTranscript = async () => {\n        const fileUrl = require(\"/assets/files/academic_transcript_unofficial.pdf\");\n        try {\n            // Assume we're on web\n            const link = document.createElement(\"a\");\n            link.href = fileUrl;\n            link.download = \"academic_transcript_andrepham.pdf\";\n            link.click();\n        } catch (error) {\n            console.error(\"File download failed:\", error);\n        }\n    };\n\n    const downloadHonoursListInclusions = async () => {\n        const fileUrl = require(\"/assets/files/honour_list_inclusions.zip\");\n        try {\n            // Assume we're on web\n            const link = document.createElement(\"a\");\n            link.href = fileUrl;\n            link.download = \"honour_list_inclusions_andrepham.zip\";\n            link.click();\n        } catch (error) {\n            console.error(\"File download failed:\", error);\n        }\n    };\n\n    const downloadLettersOfCommendation = async () => {\n        const fileUrl = require(\"/assets/files/letters_of_commendation.zip\");\n        try {\n            // Assume we're on web\n            const link = document.createElement(\"a\");\n            link.href = fileUrl;\n            link.download = \"letters_of_commendation_andrepham.zip\";\n            link.click();\n        } catch (error) {\n            console.error(\"File download failed:\", error);\n        }\n    };\n\n    return (\n        <HStack\n            spacing={ResDimensions.cardColumnSpacing}\n            style={{\n                width: componentWidth,\n                ...style,\n            }}\n        >\n            <BasicCard\n                title=\"Bachelor of Software Engineering (Honours)\"\n                style={{ width: (componentWidth - gap) / columnCount }}\n            >\n                <ResText typography={ResTypography.body}>{\"Monash University, Mar 2020 - Nov 2023\"}</ResText>\n            </BasicCard>\n\n            <BasicCard title=\"First Class Honours\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body}>{\"WAM: 87.625\\nGPA: 3.917\"}</ResText>\n\n                <ResHyperlink\n                    typography={ResTypography.body}\n                    url=\"https://www.monash.edu/students/admin/exams/results/results-legend\"\n                >\n                    {\"What do these mean?\"}\n                </ResHyperlink>\n            </BasicCard>\n\n            <BasicCard title=\"Academic Transcript\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResSmallButton\n                    label=\"download\"\n                    typography={ResTypography.buttonSmall.withColor(ResColors.textLightPersistent)}\n                    color={ResColors.accent}\n                    wide={false}\n                    onPress={downloadAcademicTranscript}\n                    style={{ alignSelf: \"flex-start\" }}\n                />\n\n                <ResHyperlink\n                    typography={ResTypography.body}\n                    url=\"https://www.monash.edu/students/support/connect/official-documents/academic-transcripts\"\n                >\n                    {\"What's an academic transcript?\"}\n                </ResHyperlink>\n            </BasicCard>\n\n            <BasicCard title=\"High Achiever\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body} style={{ paddingBottom: 6 }}>\n                    {\n                        \"I was included in the Faculty of Engineering Dean's Honour List every year of my degree, and have received multiple letters of commendation for my high academic performance.\"\n                    }\n                </ResText>\n\n                <ResSmallButton\n                    label=\"Honour List Inclusions\"\n                    typography={ResTypography.buttonSmall.withColor(ResColors.textLightPersistent)}\n                    color={ResColors.accent}\n                    wide={false}\n                    onPress={downloadHonoursListInclusions}\n                    style={{ alignSelf: \"flex-start\" }}\n                />\n\n                <ResSmallButton\n                    label=\"Letters of Commendation\"\n                    typography={ResTypography.buttonSmall.withColor(ResColors.textLightPersistent)}\n                    color={ResColors.accent}\n                    wide={false}\n                    onPress={downloadLettersOfCommendation}\n                    style={{ alignSelf: \"flex-start\" }}\n                />\n            </BasicCard>\n        </HStack>\n    );\n};\n\nexport default Education;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Dimensions, View } from \"react-native\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport { ActiveSection } from \"../../state/publishers/types/ActiveSection\";\nimport ContentContainer from \"../custom/ContentContainer\";\nimport Education from \"../custom/Education\";\nimport { NavProp } from \"../navigation/NavProp\";\nimport { useFocusEffect } from \"@react-navigation/native\";\n\ninterface Props {\n    navigation?: NavProp;\n}\n\nconst EducationScreen: React.FC<Props> = ({ navigation }) => {\n    let forceExit = false;\n\n    useEffect(() => {\n        const unsubscribe = navigation?.addListener(\"blur\", () => {\n            // When the screen is about to lose focus\n            navigation = undefined;\n            if (!forceExit) {\n                StateManager.activeSection.publish(ActiveSection.none);\n            }\n        });\n\n        return unsubscribe;\n    }, [navigation]);\n\n    useEffect(() => {\n        const onResize = (newDimensions: any) => {\n            if (!Environment.instance.screenIsPortrait()) {\n                forceExit = true;\n                navigation?.goBack();\n                navigation = undefined;\n            }\n        };\n\n        const subscription = Dimensions.addEventListener(\"change\", onResize);\n\n        // When this component is hidden, don't listen for resizes anymore\n        return () => {\n            subscription.remove();\n        };\n    }, []);\n\n    const scrollRef = useRef<any>(null);\n    const scrollIntoContent = () => {\n        if (scrollRef.current) {\n            scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\n        }\n    };\n\n    useFocusEffect(\n        React.useCallback(() => {\n            // Enter focus\n            scrollIntoContent();\n            return () => {\n                // Exist focus\n            };\n        }, []),\n    );\n\n    const [refresh, setRefresh] = useState(false);\n    StateManager.colorScheme.subscribe(() => {\n        setRefresh(!refresh);\n    });\n\n    return (\n        <View ref={scrollRef}>\n            <ContentContainer>\n                <Education />\n            </ContentContainer>\n        </View>\n    );\n};\n\nexport default EducationScreen;\n","import Experience from \"./Experience\";\n\nclass ExperiencePeriod {\n    constructor(\n        public readonly label: number | \"Active\",\n        public readonly experiences: Experience[],\n    ) {}\n}\n\nexport default ExperiencePeriod;\n","class Download {\n    constructor(\n        public readonly label: string,\n        public readonly fileName: string,\n    ) {}\n}\n\nexport default Download;\n","class Link {\n    constructor(\n        public readonly label: string,\n        public readonly shownURL: string,\n        public readonly url: string,\n    ) {}\n}\n\nexport default Link;\n","import Download from \"../Download\";\nimport Link from \"../Link\";\n\nclass Experience {\n    public get subscriptText(): string {\n        return this.projectType + \" • \" + this.duration;\n    }\n\n    constructor(\n        public readonly image: string | null,\n        public readonly name: string,\n        public readonly section: number | \"Active\",\n        public readonly projectType: string,\n        public readonly duration: string,\n        public readonly description: string,\n        public readonly links: Link[],\n        public readonly files: Download[],\n        public readonly tags: string[],\n    ) {}\n}\n\nexport default Experience;\n","import Download from \"../Download\";\nimport Link from \"../Link\";\nimport Experience from \"./Experience\";\n\nexport const Experiences: Experience[] = [\n    new Experience(\n        \"codesign_icon.png\",\n        \"Cerulean Labs\",\n        \"Active\",\n        \"Paid Position\",\n        \"2021 - Present\",\n        \"As an iOS developer at Cerulean Labs, I've worked on all areas of the iPad Codesign (formerly Spaces) app including the UI, rendering, feature development, and more. My CPD supporting document (linked below) provides a more thorough look at my contributions.\",\n        [\n            new Link(\"Codesign\", \"GetCodesign.co\", \"https://www.getcodesign.co/\"),\n            new Link(\n                \"What is CPD?\",\n                \"(Monash.edu Link)\",\n                \"https://www.monash.edu/engineering/current-students/professional-development/continuous-professional-development\",\n            ),\n        ],\n        [new Download(\"CPD Supporting Document\", \"cpd_supporting_document_cerulean_labs.pdf\")],\n        [\"Swift\", \"SwiftUI\", \"UIKit\", \"Core Graphics\", \"SceneKit\", \"Realm\", \"Unit Tests\", \"Localisation\"],\n    ),\n\n    new Experience(\n        \"yonder_icon.png\",\n        \"Yonder\",\n        \"Active\",\n        \"Personal Project\",\n        \"2021 - Present\",\n        \"An iOS rougelike RPG. Includes enemies and bosses to fight, NPCs to meet, and loot such as armour, accessories, weapons, and potions to collect.\",\n        [new Link(\"GitHub\", \"GitHub.com/Andre-Pham/Yonder\", \"https://github.com/Andre-Pham/yonder\")],\n        [],\n        [\"Swift\", \"SwiftUI\", \"MVVM\", \"Combine\", \"Serialisation\", \"Localisation\", \"Unit Tests\"],\n    ),\n\n    new Experience(\n        \"auslanspell_icon.png\",\n        \"AuslanSpell\",\n        2023,\n        \"Uni Individual Project\",\n        \"2023\",\n        \"An iOS app that converts any text prompt into an animated, interactive 3D model performing the prompt in Auslan fingerspelling. Also includes an experimental recognition feature to recognise when a letter is performed by the user using the device's camera.\",\n        [new Link(\"GitHub\", \"GitHub.com/Andre-Pham/SpellApp\", \"https://github.com/Andre-Pham/SpellApp\")],\n        [],\n        [\"Swift\", \"UIKit\", \"MVC\", \"SceneKit\", \"Vision\", \"AVFoundation\", \"Core Graphics\"],\n    ),\n\n    new Experience(\n        \"beesly_icon.png\",\n        \"Beesly\",\n        2023,\n        \"Paid Position\",\n        \"2023\",\n        'An iOS application for audibly recognising commands and providing text-to-speech feedback based on object recognition and hand detection using the device\\'s camera. Interacts with a 3D printed modular insect model, \"Beesly\".',\n        [new Link(\"GitHub\", \"GitHub.com/Andre-Pham/LemonApp\", \"https://github.com/Andre-Pham/LemonApp\")],\n        [],\n        [\"Swift\", \"UIKit\", \"MVC\", \"Create ML\", \"Vision\", \"AVFoundation\", \"Speech\"],\n    ),\n\n    new Experience(\n        null,\n        \"SwiftSerialization\",\n        2023,\n        \"Personal Project\",\n        \"2023\",\n        \"A Swift package used for serialising and restoring Swift objects. Supports serialising, persisting, reading and restoring Swift objects. Provides legacy support.\",\n        [\n            new Link(\n                \"GitHub\",\n                \"GitHub.com/Andre-Pham/SwiftSerialization\",\n                \"https://github.com/Andre-Pham/SwiftSerialization\",\n            ),\n        ],\n        [],\n        [\"Swift\", \"SQLite3\", \"Unit Tests\"],\n    ),\n\n    new Experience(\n        null,\n        \"Teach Me Talkback\",\n        2022,\n        \"Uni Team Project\",\n        \"2022\",\n        \"An Android app with the purpose of teaching visually impaired users how to use the Google screen reader Talkback. It uses lessons to teach the user gestures and navigation, and incorporates a 'sandbox mode' and 'game mode'.\",\n        [\n            new Link(\n                \"GitHub\",\n                \"GitHub.com/TalkbackTutorial/Application\",\n                \"https://github.com/TalkbackTutorial/Application\",\n            ),\n        ],\n        [new Download(\"Teach Me Talkback User Guide\", \"user_guide_teach_me_talkback.pdf\")],\n        [\"Kotlin\", \"XML Layouts\", \"Room\", \"Shared Preferences\", \"TextToSpeech\"],\n    ),\n\n    new Experience(\n        \"portfolio_icon.png\",\n        \"Portfolio\",\n        2021,\n        \"Uni Individual Project\",\n        \"2021\",\n        \"An iOS app that tracks an investment portfolio, such as stocks, cryptocurrencies, ETFs, etc. Allows you to see the performance of financial assets, create watchlists, and create a portfolio with insights on performance and return.\",\n        [new Link(\"GitHub\", \"GitHub.com/Andre-Pham/Portfolio\", \"https://github.com/Andre-Pham/Portfolio\")],\n        [],\n        [\"Swift\", \"UIKit\", \"MVC\", \"Core Data\", \"UNUserNotificationCenter\"],\n    ),\n\n    new Experience(\n        null,\n        \"Intake\",\n        2023,\n        \"Uni Team Project\",\n        \"2023\",\n        \"A multi-platform mental health triage app. Allows for nurses to triage and manage patients, create and track patient events, and view other triage cases. Allows admins to manage accounts and export patient data, and allows nurse leaders to manage shift turnover and manage patient allocation. Has account login, live data, and supports mobile, tablet, and web.\",\n        [new Link(\"GitHub\", \"GitHub.com/FIT4002-TEAM9/Leaf\", \"https://github.com/FIT4002-TEAM9/Leaf\")],\n        [],\n        [\"React Native Expo\", \"TypeScript\", \"Redux\", \"Firestore\"],\n    ),\n\n    new Experience(\n        null,\n        \"Information Visualiser\",\n        2021,\n        \"Personal Project\",\n        \"2020 - 2021\",\n        \"A self-made QR code program that can turn text into a visual pattern, and back again. Allows the creation and saving of a 'VISREP', as well as the recognition of them via image file or live video stream.\",\n        [\n            new Link(\n                \"GitHub\",\n                \"GitHub.com/Andre-Pham/Information-Visualiser\",\n                \"https://github.com/Andre-Pham/Information-Visualiser\",\n            ),\n        ],\n        [],\n        [\"Python\", \"Tkinter\", \"cv2\", \"NumPy\", \"PIL\"],\n    ),\n\n    new Experience(\n        null,\n        \"Dynamic Tic-Tac-Toe\",\n        2021,\n        \"Personal Project\",\n        \"2021\",\n        \"A Tic-tac-toe game in which the computer plays the user and either draws or wins. The user decides how many columns, rows, and how many in a row to win, though processing is limited to a board with 20 spaces. Implements lexicographic permutation for computer decisions.\",\n        [\n            new Link(\n                \"GitHub\",\n                \"GitHub.com/Andre-Pham/Dynamic-Tic-Tac-Toe\",\n                \"https://github.com/Andre-Pham/Dynamic-Tic-Tac-Toe\",\n            ),\n        ],\n        [],\n        [\"Python\", \"Tkinter\"],\n    ),\n\n    new Experience(\n        null,\n        \"Resume\",\n        2023,\n        \"Personal Project\",\n        \"2023\",\n        \"You're looking at it 😉. I wouldn't typically use (nor recommend) React Native for a website, but I wanted to get more practice using it.\",\n        [new Link(\"GitHub\", \"GitHub.com/Andre-Pham/Resume\", \"https://github.com/Andre-Pham/Resume\")],\n        [],\n        [\"React Native Expo\", \"TypeScript\", \"Redux\"],\n    ),\n];\n","import ExperiencePeriod from \"./ExperiencePeriod\";\nimport { Experiences } from \"./Experiences\";\n\nexport const ExperiencePeriods: () => ExperiencePeriod[] = () => {\n    let result: ExperiencePeriod[] = [];\n    for (let experience of Experiences) {\n        let added = false;\n        for (let section of result) {\n            if (section.label == experience.section) {\n                section.experiences.push(experience);\n                added = true;\n                break;\n            }\n        }\n        if (!added) {\n            result.push(new ExperiencePeriod(experience.section, [experience]));\n        }\n    }\n    result.sort((a, b) => {\n        // Compare the types\n        const aIsString = typeof a.label === \"string\";\n        const bIsString = typeof b.label === \"string\";\n\n        // Strings go at the top\n        if (aIsString && !bIsString) {\n            return -1;\n        }\n        if (!aIsString && bIsString) {\n            return 1;\n        }\n\n        // Numbers are sorted in decreasing order\n        if (typeof a.label === \"number\" && typeof b.label === \"number\") {\n            return (b.label as number) - (a.label as number);\n        }\n\n        // Preserve the original order if both values are not strings or numbers\n        return 0;\n    });\n    return result;\n};\n","import React from \"react\";\nimport { StyleSheet, TouchableOpacity, View, ViewStyle } from \"react-native\";\nimport ResColor from \"../../styling/color/ResColor\";\n\ninterface Props {\n    color: ResColor;\n    onPress?: () => void;\n    children: any; // No type - can be any component\n    style?: ViewStyle;\n}\n\nconst ResChip: React.FC<Props> = ({ color, onPress = undefined, children, style }) => {\n    // Touchable opacity stops the highlighting of text - remove it if it's not a button\n    return onPress == undefined ? (\n        <View style={[styles.container, { backgroundColor: color.getColor() }, style]}>{children}</View>\n    ) : (\n        <TouchableOpacity onPress={onPress} disabled={onPress == undefined}>\n            <View style={[styles.container, { backgroundColor: color.getColor() }, style]}>{children}</View>\n        </TouchableOpacity>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        borderRadius: 50,\n        paddingVertical: 6,\n        paddingHorizontal: 12,\n        alignSelf: \"flex-start\",\n    },\n});\n\nexport default ResChip;\n","export enum ResImageScale {\n    none,\n    scaleToFit,\n    scaleToFill,\n    scaleToFillCrop,\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Image, ImageResizeMode, ImageStyle } from \"react-native\";\nimport { UnreachableCaseError } from \"../../../language/errors/UnreachableCaseError\";\nimport { ResImageScale } from \"./ResImageScale\";\n\ninterface Props {\n    fileName: string;\n    width?: number | string;\n    height?: number | string;\n    scale?: ResImageScale;\n    style?: ImageStyle;\n}\n\nconst ResImage: React.FC<Props> = ({ fileName, width = 0, height = 0, scale = ResImageScale.none, style }) => {\n    const [size, setSize] = useState<{ width?: number | string; height?: number | string }>({\n        width: width,\n        height: height,\n    });\n    const [resizeMode, setResizeMode] = useState<ImageResizeMode | undefined>(undefined);\n    const [imageSize, setImageSize] = useState({\n        // Don't set these to 0, causes NaN issues\n        width: 1,\n        height: 1,\n    });\n\n    useEffect(() => {\n        const imagePath = require(\"/assets/images/\" + fileName);\n        Image.getSize(\n            imagePath,\n            (width, height) => {\n                setImageSize({ width: width, height: height });\n            },\n            (error) => {\n                console.log(\"Error getting image dimensions:\", error);\n            },\n        );\n\n        if (scale == ResImageScale.scaleToFill && typeof width == \"number\" && typeof height == \"number\") {\n            if (width > height) {\n                setSize({ width: width, height: undefined });\n            } else {\n                setSize({ width: (imageSize.width * height) / imageSize.height, height: undefined });\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        switch (scale) {\n            case ResImageScale.none:\n                setResizeMode(\"stretch\");\n                break;\n            case ResImageScale.scaleToFit:\n                setResizeMode(\"contain\");\n                break;\n            case ResImageScale.scaleToFill:\n                setResizeMode(\"cover\");\n                break;\n            case ResImageScale.scaleToFillCrop:\n                setResizeMode(\"cover\");\n                break;\n            default:\n                throw new UnreachableCaseError(scale);\n        }\n    }, []);\n\n    return (\n        <Image\n            source={require(\"/assets/images/\" + fileName)}\n            resizeMode={resizeMode}\n            style={{\n                width: size.width,\n                height: size.height,\n                aspectRatio: scale == ResImageScale.none ? undefined : 1,\n                ...style,\n            }}\n        />\n    );\n};\n\nexport default ResImage;\n","import React from \"react\";\nimport { ViewStyle } from \"react-native\";\nimport Experience from \"../../data/experience/Experience\";\nimport ResSmallButton from \"../base/ResButton/ResSmallButton\";\nimport ResChip from \"../base/ResChip/ResChip\";\nimport ResHyperlink from \"../base/ResHyperlink/ResHyperlink\";\nimport ResText from \"../base/ResText/ResText\";\nimport FlatContainer from \"../containers/FlatContainer\";\nimport HStack from \"../containers/HStack\";\nimport VStack from \"../containers/VStack\";\nimport ResColors from \"../styling/ResColors\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ResTypography from \"../styling/ResTypography\";\nimport ResImage from \"../base/ResImage/ResImage\";\nimport { ResImageScale } from \"../base/ResImage/ResImageScale\";\n\ninterface Props {\n    experience: Experience;\n    style?: ViewStyle;\n}\n\nconst ExperienceCard: React.FC<Props> = ({ experience, style }) => {\n    const renderLinks = () => {\n        return experience.links.map((link) => (\n            <ResText typography={ResTypography.body} key={link.url}>\n                {link.label + \": \"}\n\n                <ResHyperlink url={link.url} typography={ResTypography.body}>\n                    {link.shownURL}\n                </ResHyperlink>\n            </ResText>\n        ));\n    };\n\n    const renderDownloads = () => {\n        return experience.files.map((file) => (\n            <ResSmallButton\n                key={file.fileName}\n                label={file.label}\n                typography={ResTypography.buttonSmall.withColor(ResColors.textLightPersistent)}\n                color={ResColors.accent}\n                wide={false}\n                onPress={() => {\n                    const fileUrl = require(\"/assets/files/\" + file.fileName);\n                    try {\n                        // Assume we're on web\n                        const link = document.createElement(\"a\");\n                        link.href = fileUrl;\n                        link.download = file.fileName;\n                        link.click();\n                    } catch (error) {\n                        console.error(\"File download failed:\", error);\n                    }\n                }}\n                style={{ alignSelf: \"flex-start\" }}\n            />\n        ));\n    };\n\n    const renderTags = () => {\n        return experience.tags.map((tag) => (\n            <ResChip color={ResColors.chipBackground} key={tag}>\n                <ResText typography={ResTypography.chip}>{tag}</ResText>\n            </ResChip>\n        ));\n    };\n\n    return (\n        <FlatContainer color={ResColors.fillBackgroundLight} style={{ flex: 1, ...style }}>\n            <HStack spacing={12} style={{ paddingBottom: 4 }}>\n                {experience.image != null ? (\n                    <ResImage\n                        height={38}\n                        width={38}\n                        fileName={experience.image}\n                        scale={ResImageScale.none}\n                        style={{\n                            borderRadius: 8,\n                            alignSelf: \"center\",\n                            borderWidth: 2,\n                            borderColor: ResColors.textSemiDark.getColor(),\n                        }}\n                    />\n                ) : undefined}\n\n                <ResText typography={ResTypography.header} wide={false} numberOfLines={3}>\n                    {experience.name}\n                </ResText>\n            </HStack>\n\n            <VStack spacing={ResDimensions.bodyParagraphSpacing} style={{ paddingTop: 4 }}>\n                <ResText typography={ResTypography.subscript}>{experience.subscriptText}</ResText>\n\n                <ResText typography={ResTypography.body}>{experience.description}</ResText>\n\n                {renderLinks()}\n\n                {experience.files.length == 0 ? (\n                    <></>\n                ) : (\n                    <VStack spacing={ResDimensions.tagSpacing} style={{ paddingTop: 6 }}>\n                        {renderDownloads()}\n                    </VStack>\n                )}\n\n                <HStack spacing={ResDimensions.tagSpacing} style={{ paddingTop: 6 }}>\n                    {renderTags()}\n                </HStack>\n            </VStack>\n        </FlatContainer>\n    );\n};\n\nexport default ExperienceCard;\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport ResText from \"../base/ResText/ResText\";\nimport HStack from \"../containers/HStack\";\nimport ResTypography from \"../styling/ResTypography\";\n\ninterface Props {\n    children: any;\n}\n\nconst YearHeader: React.FC<Props> = ({ children }) => {\n    let typography = ResTypography.sectionTitle;\n    return (\n        <HStack spacing={16} style={{ alignItems: \"baseline\" }}>\n            <ResText typography={typography} wide={null}>\n                {children}\n            </ResText>\n\n            <View\n                style={{\n                    flex: 1,\n                    flexGrow: 1,\n                    height: 2,\n                    backgroundColor: typography.color,\n                }}\n            />\n        </HStack>\n    );\n};\n\nexport default YearHeader;\n","import { useEffect, useState } from \"react\";\nimport { Dimensions } from \"react-native\";\nimport ExperiencePeriod from \"../../data/experience/ExperiencePeriod\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport HStack from \"../containers/HStack\";\nimport VStack from \"../containers/VStack\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ExperienceCard from \"./ExperienceCard\";\nimport YearHeader from \"./YearHeader\";\n\ninterface Props {\n    period: ExperiencePeriod;\n}\n\nconst ExperienceSection: React.FC<Props> = ({ period }) => {\n    const [screenIsPortrait, setScreenIsPortrait] = useState(Environment.instance.screenIsPortrait());\n    const [componentWidth, setComponentWidth] = useState(StateManager.contentWidth.read());\n\n    useEffect(() => {\n        Dimensions.addEventListener(\"change\", (newDimensions) => {\n            setScreenIsPortrait(Environment.instance.screenIsPortrait());\n        });\n\n        const unsubscribe = StateManager.contentWidth.subscribe(() => {\n            setComponentWidth(StateManager.contentWidth.read());\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    let columnCount = screenIsPortrait ? 1 : 2;\n    let gap = (columnCount - 1) * ResDimensions.cardColumnSpacing;\n\n    const renderExperienceCards = () => {\n        return period.experiences.map((experience) => (\n            <ExperienceCard\n                key={experience.name}\n                experience={experience}\n                style={{ flex: undefined, width: (componentWidth - gap) / columnCount }}\n            />\n        ));\n    };\n\n    return (\n        <VStack spacing={ResDimensions.pageContentSpacing} style={{ width: componentWidth }}>\n            <YearHeader>{period.label}</YearHeader>\n\n            <HStack spacing={ResDimensions.cardColumnSpacing}>{renderExperienceCards()}</HStack>\n        </VStack>\n    );\n};\n\nexport default ExperienceSection;\n","import React from \"react\";\nimport { ViewStyle } from \"react-native\";\nimport { ExperiencePeriods } from \"../../data/experience/ExperiencePeriods\";\nimport VStack from \"../containers/VStack\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ExperienceSection from \"./ExperienceSection\";\n\ninterface Props {\n    style?: ViewStyle;\n}\n\nconst Experience: React.FC<Props> = ({ style }) => {\n    return (\n        <VStack spacing={ResDimensions.pageContentSpacing} style={{ ...style }}>\n            {ExperiencePeriods().map((period) => (\n                <ExperienceSection period={period} key={period.label} />\n            ))}\n        </VStack>\n    );\n};\n\nexport default Experience;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Dimensions, View } from \"react-native\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport { ActiveSection } from \"../../state/publishers/types/ActiveSection\";\nimport ContentContainer from \"../custom/ContentContainer\";\nimport Experience from \"../custom/Experience\";\nimport { NavProp } from \"../navigation/NavProp\";\nimport { useFocusEffect } from \"@react-navigation/native\";\n\ninterface Props {\n    navigation?: NavProp;\n}\n\nconst ExperienceScreen: React.FC<Props> = ({ navigation }) => {\n    let forceExit = false;\n\n    useEffect(() => {\n        const unsubscribe = navigation?.addListener(\"blur\", () => {\n            // When the screen is about to lose focus\n            navigation = undefined;\n            if (!forceExit) {\n                StateManager.activeSection.publish(ActiveSection.none);\n            }\n        });\n\n        return unsubscribe;\n    }, [navigation]);\n\n    useEffect(() => {\n        const onResize = (newDimensions: any) => {\n            if (!Environment.instance.screenIsPortrait()) {\n                forceExit = true;\n                navigation?.goBack();\n                navigation = undefined;\n            }\n        };\n\n        const subscription = Dimensions.addEventListener(\"change\", onResize);\n\n        // When this component is hidden, don't listen for resizes anymore\n        return () => {\n            subscription.remove();\n        };\n    }, []);\n\n    const scrollRef = useRef<any>(null);\n    const scrollIntoContent = () => {\n        if (scrollRef.current) {\n            scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\n        }\n    };\n\n    useFocusEffect(\n        React.useCallback(() => {\n            // Enter focus\n            scrollIntoContent();\n            return () => {\n                // Exist focus\n            };\n        }, []),\n    );\n\n    const [refresh, setRefresh] = useState(false);\n    StateManager.colorScheme.subscribe(() => {\n        setRefresh(!refresh);\n    });\n\n    return (\n        <View ref={scrollRef}>\n            <ContentContainer>\n                <Experience />\n            </ContentContainer>\n        </View>\n    );\n};\n\nexport default ExperienceScreen;\n","import React from \"react\";\nimport { ViewStyle } from \"react-native\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport ResColor from \"../../styling/color/ResColor\";\n\ninterface Props {\n    // Icon name (https://pictogrammers.com/library/mdi/)\n    icon: string;\n    // Icon fill color\n    color: ResColor;\n    // Icon size\n    size: number;\n    // Custom style\n    style?: ViewStyle;\n}\n\nconst ResIcon: React.FC<Props> = ({ icon, color, size, style }) => {\n    return <Icon name={icon} size={size} color={color.getColor()} style={style} />;\n};\n\nexport default ResIcon;\n","import React from \"react\";\nimport { TouchableOpacity, ViewStyle } from \"react-native\";\nimport ResColor from \"../../styling/color/ResColor\";\nimport ResIcon from \"../ResIcon/ResIcon\";\nimport ResImage from \"../ResImage/ResImage\";\nimport { ResImageScale } from \"../ResImage/ResImageScale\";\n\ninterface Props {\n    color: ResColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    iconColor?: ResColor;\n    fileName?: string;\n    size: number;\n    onlyIcon?: boolean;\n    style?: ViewStyle;\n    onPress?: () => void;\n}\n\nconst ResIconButton: React.FC<Props> = ({\n    color,\n    icon = undefined,\n    iconColor = undefined,\n    fileName = undefined,\n    size,\n    onlyIcon = false,\n    style,\n    onPress,\n}) => {\n    return (\n        <TouchableOpacity\n            onPress={onPress}\n            disabled={onPress == undefined}\n            style={{\n                backgroundColor: color.getColor(),\n                borderRadius: 50,\n                width: onlyIcon ? 0 : size,\n                height: onlyIcon ? 0 : size,\n                justifyContent: \"center\",\n                ...style,\n            }}\n        >\n            {fileName != undefined ? (\n                <ResImage\n                    fileName={fileName}\n                    width={(size * 1.8) / 3.0}\n                    height={(size * 1.8) / 3.0}\n                    scale={ResImageScale.scaleToFit}\n                    style={{\n                        alignSelf: \"center\",\n                        tintColor: iconColor?.getColor(),\n                    }}\n                />\n            ) : undefined}\n\n            {icon != undefined ? (\n                <ResIcon\n                    icon={icon}\n                    size={(size * 2.2) / 3.0}\n                    color={iconColor ?? new ResColor(\"#ffffff\")}\n                    style={{\n                        alignSelf: \"center\",\n                    }}\n                />\n            ) : undefined}\n        </TouchableOpacity>\n    );\n};\n\nexport default ResIconButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport { ColorScheme } from \"../../state/types/ColorScheme\";\nimport ResIconButton from \"../base/ResIconButton/ResIconButton\";\nimport ResImage from \"../base/ResImage/ResImage\";\nimport ResText from \"../base/ResText/ResText\";\nimport HStack from \"../containers/HStack\";\nimport VStack from \"../containers/VStack\";\nimport ResColors from \"../styling/ResColors\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ResTypography from \"../styling/ResTypography\";\n\ninterface Props {\n    // None\n}\n\nconst Header: React.FC<Props> = (\n    {\n        // None\n    },\n) => {\n    const inverseColorScheme = () => {\n        let current = StateManager.colorScheme.read();\n        if (current == ColorScheme.light) {\n            StateManager.colorScheme.publish(ColorScheme.dark);\n        } else {\n            StateManager.colorScheme.publish(ColorScheme.light);\n        }\n    };\n\n    return (\n        <HStack spacing={16} style={{ alignItems: \"center\" }}>\n            <ResImage\n                height={64}\n                width={64}\n                fileName=\"profile_picture.png\"\n                style={{ borderRadius: 50, alignSelf: \"center\" }}\n            />\n\n            <VStack spacing={4} style={{ alignSelf: \"center\" }}>\n                <ResText typography={ResTypography.pageTitle} verticalWrap={true}>\n                    {\"Andre Pham\"}\n                </ResText>\n\n                <ResText typography={ResTypography.subscript} verticalWrap={true}>\n                    {\"andrekypham@gmail.com\"}\n                </ResText>\n            </VStack>\n\n            <HStack style={{ flex: 1 }}>\n                <View style={{ flex: 1 }} />\n\n                <ResIconButton\n                    color={ResColors.background}\n                    fileName={StateManager.colorScheme.read() == ColorScheme.dark ? \"moon.png\" : \"sun.png\"}\n                    size={ResDimensions.iconButtonSize}\n                    onPress={inverseColorScheme}\n                    onlyIcon={true}\n                />\n            </HStack>\n        </HStack>\n    );\n};\n\nexport default Header;\n","import { useEffect, useState } from \"react\";\nimport { Dimensions, ViewStyle } from \"react-native\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport ResText from \"../base/ResText/ResText\";\nimport HStack from \"../containers/HStack\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ResTypography from \"../styling/ResTypography\";\nimport BasicCard from \"./BasicCard\";\n\ninterface Props {\n    style?: ViewStyle;\n}\n\nconst Skills: React.FC<Props> = ({ style }) => {\n    const [screenIsPortrait, setScreenIsPortrait] = useState(Environment.instance.screenIsPortrait());\n    const [componentWidth, setComponentWidth] = useState(StateManager.contentWidth.read());\n\n    useEffect(() => {\n        Dimensions.addEventListener(\"change\", (newDimensions) => {\n            setScreenIsPortrait(Environment.instance.screenIsPortrait());\n        });\n\n        const unsubscribe = StateManager.contentWidth.subscribe(() => {\n            setComponentWidth(StateManager.contentWidth.read());\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    let columnCount = screenIsPortrait ? 1 : 1;\n    let gap = (columnCount - 1) * ResDimensions.cardColumnSpacing;\n\n    return (\n        <HStack\n            spacing={ResDimensions.cardColumnSpacing}\n            style={{\n                width: componentWidth,\n                alignItems: \"flex-start\",\n                ...style,\n            }}\n        >\n            <BasicCard title=\"Being a Developer\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body}>\n                    {\n                        \"I know all the basic skills you would expect a developer to have such as git and source control, IDE tools, development practices, etc. I'm experienced in many different areas of development including UI, 3D computer graphics, 2D computer graphics, thread management, interacting with web services, applied mathematics, data persistence, databases, package management, localisation, and more.\"\n                    }\n                </ResText>\n            </BasicCard>\n\n            <BasicCard title=\"Native iOS\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body}>\n                    {\n                        \"My primary area of expertise is native iOS development, having worked on an extensive number of both individual and team-based projects. Using Swift, I've built apps and packages using all kinds of frameworks including SwiftUI, UIKit, Core Graphics, SceneKit, Vision, AVFoundation, Speech, Core Video, Core Data, and more. I'm well versed in package management using Swift Packages and Cocoa Pods, developing unit tests, localisation, and working with the rest of the iOS ecosystem. I have extensive experience in common app architectures such as MVVM and MVC, as well as design patterns such as the delegate pattern, publisher subscriber pattern, and so on.\"\n                    }\n                </ResText>\n            </BasicCard>\n\n            <BasicCard title=\"React Native\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body}>\n                    {\n                        \"I have experience building React Native apps using expo (including this site!), having worked on both individual and team-based projects. Using TypeScript I've become familiar with the React Native ecosystem, having used redux architecture to develop multi-platform apps. Areas of experience include frontend development, interfacing with databases, localisation, and more.\"\n                    }\n                </ResText>\n            </BasicCard>\n\n            <BasicCard title=\"Native Android\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body}>\n                    {\n                        \"I have experience building native Android apps in Kotlin and Java using XML Layouts. I'm formally educated in Android development and have built two apps in team settings. I'm experienced in basic Android architecture, activity and fragment lifecycles, UI development, persisting data using Shared Preferences and Room, interacting with web services, and interfacing with accessibility services.\"\n                    }\n                </ResText>\n            </BasicCard>\n\n            <BasicCard title=\"Databases\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body}>\n                    {\n                        \"I have a range of experience working with various types of databases, including designing, querying, and integrating them into applications. Databases I have experience with include SQL (including SQLite and PostgreSQL), Firebase's Firestore, MongoDB, Realm, and Neo4j.\"\n                    }\n                </ResText>\n            </BasicCard>\n\n            <BasicCard title=\"Creative Applications\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body}>\n                    {\n                        \"I greatly enjoy the practice of art and design and pursue it in my own time. I have experience in applications such as Adobe Photoshop, Adobe Illustrator, Adobe Premiere Pro, Audacity, Procreate (iPadOS graphics software), Figma, and more. Apart from considering design and usability in my applications, I also have a Behance portfolio linked above.\"\n                    }\n                </ResText>\n            </BasicCard>\n\n            <BasicCard title=\"Python\" style={{ width: (componentWidth - gap) / columnCount }}>\n                <ResText typography={ResTypography.body}>\n                    {\n                        \"Sort of an outlier, but oddly enough I have a lot of experience with Python. I've used it in my own personal projects, in university projects, and for building scripts for processing and manipulating data. I have experience with Pandas, NumPy, OpenCV, PIL, and a bunch more.\"\n                    }\n                </ResText>\n            </BasicCard>\n        </HStack>\n    );\n};\n\nexport default Skills;\n","import React from \"react\";\nimport { StyleProp, TouchableOpacity, ViewStyle } from \"react-native\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport ResColor from \"../../styling/color/ResColor\";\nimport ResTypographyConfig from \"../../styling/typography/ResTypographyConfig\";\nimport ResText from \"../ResText/ResText\";\n\ninterface Props {\n    label: string;\n    typography: ResTypographyConfig;\n    color: ResColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    disabled?: boolean;\n    wide?: boolean;\n    style?: StyleProp<ViewStyle>;\n    onPress: () => void;\n}\n\nconst ResButton: React.FC<Props> = ({\n    label,\n    typography,\n    color,\n    icon = undefined,\n    disabled = false,\n    wide = true,\n    style,\n    onPress,\n}) => {\n    return (\n        <TouchableOpacity\n            onPress={disabled ? undefined : onPress}\n            style={[\n                {\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    paddingVertical: 12,\n                    paddingHorizontal: 24,\n                    borderRadius: 50,\n                    backgroundColor: color.getColor(),\n                    opacity: disabled ? 0.5 : 1,\n                },\n                wide ? { width: \"100%\" } : { alignSelf: \"center\" },\n                style,\n            ]}\n            disabled={disabled}\n        >\n            {icon && <Icon name={icon} size={20} color={typography.color} style={{ paddingRight: 6 }} />}\n\n            <ResText typography={typography} wide={false}>\n                {label}\n            </ResText>\n        </TouchableOpacity>\n    );\n};\n\nexport default ResButton;\n","import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, ViewStyle } from \"react-native\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport { ActiveSection } from \"../../state/publishers/types/ActiveSection\";\nimport ResButton from \"../base/ResButton/ResButton\";\nimport ResColors from \"../styling/ResColors\";\nimport ResTypography from \"../styling/ResTypography\";\n\ninterface Props {\n    label: string;\n    section: ActiveSection;\n    radius: number;\n    style?: ViewStyle;\n}\n\nconst SplashButton: React.FC<Props> = ({ label, section, radius, style }) => {\n    const [activeSection, setActiveSection] = useState(StateManager.activeSection.read());\n\n    useEffect(() => {\n        const unsubscribe = StateManager.activeSection.subscribe(() => {\n            setActiveSection(StateManager.activeSection.read());\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    let selectedTypography = ResTypography.button.withColor(ResColors.textLightPersistent);\n    let unselectedTypography = ResTypography.button.withColor(ResColors.textDark);\n\n    return (\n        <ResButton\n            label={label}\n            typography={activeSection == section ? selectedTypography : unselectedTypography}\n            color={activeSection == section ? ResColors.accent : ResColors.fillBackgroundLight}\n            onPress={() => {\n                let toPublish = activeSection == section ? ActiveSection.none : section;\n                StateManager.activeSection.publish(toPublish);\n            }}\n            wide={false}\n            style={[\n                { width: radius * 2, height: radius * 2, borderRadius: 100 },\n                activeSection == section ? styles.shadow : {},\n                style,\n            ]}\n        />\n    );\n};\n\nconst styles = StyleSheet.create({\n    shadow: {\n        shadowColor: \"#000000\",\n        shadowOffset: {\n            width: 0,\n            height: 4,\n        },\n        shadowOpacity: 0.4,\n        shadowRadius: 11,\n    },\n});\n\nexport default SplashButton;\n","import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, ViewStyle } from \"react-native\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport { ActiveSection } from \"../../state/publishers/types/ActiveSection\";\nimport ResButton from \"../base/ResButton/ResButton\";\nimport ResColors from \"../styling/ResColors\";\nimport ResTypography from \"../styling/ResTypography\";\n\ninterface Props {\n    label: string;\n    section: ActiveSection;\n    style?: ViewStyle;\n}\n\nconst SplashButtonMobile: React.FC<Props> = ({ label, section, style }) => {\n    const [activeSection, setActiveSection] = useState(StateManager.activeSection.read());\n\n    useEffect(() => {\n        const unsubscribe = StateManager.activeSection.subscribe(() => {\n            setActiveSection(StateManager.activeSection.read());\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    let buttonSize = 300;\n    let selectedTypography = ResTypography.button;\n    selectedTypography.resColor = ResColors.textLight;\n    let unselectedTypography = ResTypography.button;\n    unselectedTypography.resColor = ResColors.textDark;\n\n    return (\n        <ResButton\n            label={label}\n            icon=\"chevron-right\"\n            typography={activeSection == section ? selectedTypography : unselectedTypography}\n            color={activeSection == section ? ResColors.accent : ResColors.fillBackgroundLight}\n            onPress={() => {\n                let toPublish = activeSection == section ? ActiveSection.none : section;\n                StateManager.activeSection.publish(toPublish);\n            }}\n            wide={true}\n            style={[\n                {\n                    maxWidth: buttonSize,\n                    justifyContent: \"flex-start\",\n                    paddingLeft: 32,\n                    alignSelf: \"center\",\n                },\n                activeSection == section ? styles.shadow : {},\n                style,\n            ]}\n        />\n    );\n};\n\nconst styles = StyleSheet.create({\n    shadow: {\n        shadowColor: \"#000000\",\n        shadowOffset: {\n            width: 0,\n            height: 4,\n        },\n        shadowOpacity: 0.4,\n        shadowRadius: 11,\n    },\n});\n\nexport default SplashButtonMobile;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport VStack from \"../../containers/VStack\";\nimport ResTypography from \"../../styling/ResTypography\";\nimport ResColor from \"../../styling/color/ResColor\";\nimport ResIconButton from \"../ResIconButton/ResIconButton\";\nimport ResText from \"../ResText/ResText\";\n\ninterface Props {\n    color: ResColor;\n    icon?: string; // https://pictogrammers.com/library/mdi/\n    iconColor?: ResColor;\n    fileName?: string;\n    label: string;\n    size: number;\n    style?: ViewStyle;\n    onPress: () => void;\n}\n\nconst ResIconButtonLabelled: React.FC<Props> = ({\n    color,\n    icon = undefined,\n    iconColor = undefined,\n    fileName = undefined,\n    label,\n    size,\n    style,\n    onPress,\n}) => {\n    return (\n        <VStack\n            spacing={5}\n            style={{\n                alignItems: \"center\",\n                alignSelf: \"flex-start\",\n                // Adjsuts frame to match label (positioned aboslute)\n                // Tested - it does scale (both the padding and the absolute positioning)\n                paddingBottom: 16,\n                ...style,\n            }}\n        >\n            <ResIconButton\n                icon={icon}\n                iconColor={iconColor}\n                fileName={fileName}\n                color={color}\n                size={size}\n                onPress={onPress}\n            />\n\n            <View style={{ position: \"absolute\", top: size + 4, flex: 1 }}>\n                <ResText typography={ResTypography.subscriptLabel} style={{ alignSelf: \"center\", textAlign: \"center\" }}>\n                    {label}\n                </ResText>\n            </View>\n        </VStack>\n    );\n};\n\nexport default ResIconButtonLabelled;\n","import React from \"react\";\nimport { Linking, ViewStyle } from \"react-native\";\nimport ResIconButtonLabelled from \"../base/ResIconButtonLabelled/ResIconButtonLabelled\";\nimport ResText from \"../base/ResText/ResText\";\nimport HStack from \"../containers/HStack\";\nimport VStack from \"../containers/VStack\";\nimport ResColors from \"../styling/ResColors\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport ResTypography from \"../styling/ResTypography\";\n\ninterface Props {\n    style?: ViewStyle;\n}\n\nconst SplashIntro: React.FC<Props> = ({ style }) => {\n    return (\n        <VStack spacing={16} style={style}>\n            <ResText\n                typography={ResTypography.splash}\n                style={{\n                    maxWidth: 550,\n                }}\n            >\n                {\n                    \"I'm a mobile developer who specialises in native iOS development and React Native. My passions are code, art and design.\"\n                }\n            </ResText>\n\n            <ResText\n                typography={ResTypography.standoutBody}\n                style={{\n                    maxWidth: 500,\n                }}\n            >\n                {\"Find my social links below, or explore my qualifications and experience.\"}\n            </ResText>\n\n            <HStack spacing={ResDimensions.iconButtonSpacing} style={{ paddingTop: 8 }}>\n                <ResIconButtonLabelled\n                    icon=\"github\"\n                    color={ResColors.gitHub}\n                    label=\"GitHub\"\n                    size={ResDimensions.iconButtonSize}\n                    onPress={() => {\n                        Linking.openURL(\"https://github.com/Andre-Pham\");\n                    }}\n                />\n\n                <ResIconButtonLabelled\n                    fileName={\"behance_white.png\"}\n                    color={ResColors.behance}\n                    label=\"Behance\"\n                    size={ResDimensions.iconButtonSize}\n                    onPress={() => {\n                        Linking.openURL(\"https://behance.net/andrepham\");\n                    }}\n                />\n\n                <ResIconButtonLabelled\n                    icon=\"linkedin\"\n                    color={ResColors.linkedIn}\n                    label=\"LinkedIn\"\n                    size={ResDimensions.iconButtonSize}\n                    onPress={() => {\n                        Linking.openURL(\"https://www.linkedin.com/in/andrekypham\");\n                    }}\n                />\n            </HStack>\n        </VStack>\n    );\n};\n\nexport default SplashIntro;\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions } from \"react-native\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport { ActiveSection } from \"../../state/publishers/types/ActiveSection\";\nimport HStack from \"../containers/HStack\";\nimport VStack from \"../containers/VStack\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport SplashButton from \"./SplashButton\";\nimport SplashButtonMobile from \"./SplashButtonMobile\";\nimport SplashIntro from \"./SplashIntro\";\n\ninterface Props {\n    // No props\n}\n\nconst Splash: React.FC<Props> = (\n    {\n        // No props\n    },\n) => {\n    const [screenIsPortrait, setScreenIsPortrait] = useState(Environment.instance.screenIsPortrait());\n\n    useEffect(() => {\n        Dimensions.addEventListener(\"change\", (newDimensions) => {\n            setScreenIsPortrait(Environment.instance.screenIsPortrait());\n        });\n    }, []);\n\n    const onLayout = (event: any) => {\n        const layout = event.nativeEvent.layout;\n        if (layout.width > 0) {\n            // Only if this component is visible\n            StateManager.contentWidth.publish(layout.width);\n        }\n    };\n\n    if (screenIsPortrait) {\n        return (\n            <VStack spacing={ResDimensions.mainScreenSpacing} onLayout={onLayout}>\n                <SplashIntro style={{ flex: 1 }} />\n\n                <VStack spacing={12}>\n                    <SplashButtonMobile label=\"experience\" section={ActiveSection.experience} />\n\n                    <SplashButtonMobile label=\"skills\" section={ActiveSection.skills} />\n\n                    <SplashButtonMobile label=\"education\" section={ActiveSection.education} />\n                </VStack>\n            </VStack>\n        );\n    } else {\n        let buttonRadius = 58;\n        let verticalButtonSpacing = 32;\n        let horizontalButtonSpacing =\n            Math.cos(Math.PI / 3 / 2) * (buttonRadius * 2 + verticalButtonSpacing) - buttonRadius * 2;\n        return (\n            <HStack spacing={64} style={{ alignItems: \"flex-start\" }} onLayout={onLayout}>\n                <SplashIntro />\n\n                <HStack spacing={horizontalButtonSpacing} style={{ alignItems: \"center\" }}>\n                    <VStack spacing={verticalButtonSpacing}>\n                        <SplashButton label=\"experience\" section={ActiveSection.experience} radius={buttonRadius} />\n\n                        <SplashButton label=\"skills\" section={ActiveSection.skills} radius={buttonRadius} />\n                    </VStack>\n\n                    <SplashButton label=\"education\" section={ActiveSection.education} radius={buttonRadius} />\n                </HStack>\n            </HStack>\n        );\n    }\n};\n\nexport default Splash;\n","import { useEffect, useRef, useState } from \"react\";\nimport { Dimensions, View, useColorScheme } from \"react-native\";\nimport { UnreachableCaseError } from \"../../language/errors/UnreachableCaseError\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport { ActiveSection } from \"../../state/publishers/types/ActiveSection\";\nimport VStack from \"../containers/VStack\";\nimport Education from \"../custom/Education\";\nimport Experience from \"../custom/Experience\";\nimport Header from \"../custom/Header\";\nimport Skills from \"../custom/Skills\";\nimport Splash from \"../custom/Splash\";\nimport { NavProp } from \"../navigation/NavProp\";\nimport ResDimensions from \"../styling/ResDimensions\";\nimport { ColorScheme } from \"../../state/types/ColorScheme\";\nimport \"./mainscreen.css\";\n\ninterface Props {\n    navigation?: NavProp;\n}\n\nconst MainScreen: React.FC<Props> = ({ navigation }) => {\n    const [activeSection, setActiveSection] = useState(StateManager.activeSection.read());\n\n    useEffect(() => {\n        Dimensions.addEventListener(\"change\", (newDimensions) => {\n            if (Environment.instance.screenIsPortrait()) {\n                navigateToSection();\n            }\n        });\n\n        const unsubscribe = StateManager.activeSection.subscribe(() => {\n            setActiveSection(StateManager.activeSection.read());\n            if (Environment.instance.screenIsPortrait()) {\n                navigateToSection();\n            }\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    const navigateToSection = () => {\n        let activeSection = StateManager.activeSection.read();\n        switch (activeSection) {\n            case ActiveSection.none:\n                break;\n            case ActiveSection.education:\n                navigation?.navigate(\"Andre Pham | Education\");\n                break;\n            case ActiveSection.experience:\n                navigation?.navigate(\"Andre Pham | Experience\");\n                break;\n            case ActiveSection.skills:\n                navigation?.navigate(\"Andre Pham | Skills\");\n                break;\n            default:\n                throw new UnreachableCaseError(activeSection);\n        }\n    };\n\n    useEffect(() => {\n        if (!Environment.instance.screenIsPortrait()) {\n            scrollIntoContent();\n        }\n    }, [activeSection]);\n\n    // Disable automatic scrolling on page refresh\n    useEffect(() => {\n        if (\"scrollRestoration\" in window.history) {\n            window.history.scrollRestoration = \"manual\";\n        }\n    }, []);\n\n    const renderPageContent = () => {\n        switch (activeSection) {\n            case ActiveSection.none:\n                return <></>;\n            case ActiveSection.experience:\n                return <Experience />;\n            case ActiveSection.skills:\n                return <Skills />;\n            case ActiveSection.education:\n                return <Education style={{ paddingBottom: 450 }} />;\n            default:\n                throw new UnreachableCaseError(activeSection);\n        }\n    };\n\n    const scrollRef = useRef<any>(null);\n    const scrollIntoContent = () => {\n        if (scrollRef.current) {\n            scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\n        }\n    };\n\n    const [refresh, setRefresh] = useState(false);\n    StateManager.colorScheme.subscribe(() => {\n        setRefresh(!refresh);\n    });\n\n    // React to the device changing its color scheme\n    const colorScheme = useColorScheme();\n    useEffect(() => {\n        if (colorScheme == \"light\") {\n            StateManager.colorScheme.publish(ColorScheme.light);\n        } else {\n            StateManager.colorScheme.publish(ColorScheme.dark);\n        }\n    }, [colorScheme]);\n\n    return (\n        <View style={{ padding: ResDimensions.screenPadding }}>\n            <VStack spacing={ResDimensions.mainScreenSpacing} style={{ alignContent: \"center\" }}>\n                <Header />\n\n                <Splash />\n            </VStack>\n\n            {/* We don't want to see the edge of the view above, so position this a little lower */}\n            <View ref={scrollRef} style={{ marginTop: 24, marginBottom: -24 }} />\n\n            <VStack\n                spacing={ResDimensions.pageContentSpacing}\n                style={{\n                    alignContent: \"center\",\n                    paddingTop: activeSection == ActiveSection.none ? 0 : ResDimensions.mainScreenSpacing,\n                    paddingBottom: activeSection == ActiveSection.none ? 200 : 0,\n                }}\n            >\n                {renderPageContent()}\n            </VStack>\n        </View>\n    );\n};\n\nexport default MainScreen;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Dimensions, View } from \"react-native\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\nimport { ActiveSection } from \"../../state/publishers/types/ActiveSection\";\nimport ContentContainer from \"../custom/ContentContainer\";\nimport Skills from \"../custom/Skills\";\nimport { NavProp } from \"../navigation/NavProp\";\nimport { useFocusEffect } from \"@react-navigation/native\";\n\ninterface Props {\n    navigation?: NavProp;\n}\n\nconst SkillsScreen: React.FC<Props> = ({ navigation }) => {\n    let forceExit = false;\n\n    useEffect(() => {\n        const unsubscribe = navigation?.addListener(\"blur\", () => {\n            // When the screen is about to lose focus\n            navigation = undefined;\n            if (!forceExit) {\n                StateManager.activeSection.publish(ActiveSection.none);\n            }\n        });\n\n        return unsubscribe;\n    }, [navigation]);\n\n    useEffect(() => {\n        const onResize = (newDimensions: any) => {\n            if (!Environment.instance.screenIsPortrait()) {\n                forceExit = true;\n                navigation?.goBack();\n                navigation = undefined;\n            }\n        };\n\n        const subscription = Dimensions.addEventListener(\"change\", onResize);\n\n        // When this component is hidden, don't listen for resizes anymore\n        return () => {\n            subscription.remove();\n        };\n    }, []);\n\n    const scrollRef = useRef<any>(null);\n    const scrollIntoContent = () => {\n        if (scrollRef.current) {\n            scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\n        }\n    };\n\n    useFocusEffect(\n        React.useCallback(() => {\n            // Enter focus\n            scrollIntoContent();\n            return () => {\n                // Exist focus\n            };\n        }, []),\n    );\n\n    const [refresh, setRefresh] = useState(false);\n    StateManager.colorScheme.subscribe(() => {\n        setRefresh(!refresh);\n    });\n\n    return (\n        <View ref={scrollRef}>\n            <ContentContainer>\n                <Skills />\n            </ContentContainer>\n        </View>\n    );\n};\n\nexport default SkillsScreen;\n","class NavScreen {\n    /**\n     * @param title the name of the screen, this will displayed in the header\n     * @param id the id of the screen for navigation\n     * @param component the actual screen to render\n     * @param options the options to add to the screen, these will be provided to the <Stack.Screen> component (https://reactnavigation.org/docs/stack-navigator)\n     */\n    constructor(\n        public readonly title: string | null,\n        public readonly id: string,\n        public readonly component: React.FC,\n        public readonly options?: object,\n    ) {}\n}\n\nexport default NavScreen;\n","import EducationScreen from \"../screens/EducationScreen\";\nimport ExperienceScreen from \"../screens/ExperienceScreen\";\nimport MainScreen from \"../screens/MainScreen\";\nimport SkillsScreen from \"../screens/SkillsScreen\";\nimport NavStack from \"./NavStack\";\n\nexport const MainNavStack = new NavStack()\n    .addNewScreen(null, \"Andre Pham\", MainScreen)\n    .addNewScreen(\"Education\", \"Andre Pham | Education\", EducationScreen)\n    .addNewScreen(\"Experience\", \"Andre Pham | Experience\", ExperienceScreen)\n    .addNewScreen(\"Skills\", \"Andre Pham | Skills\", SkillsScreen);\n","import NavScreen from \"./NavScreen\";\n\nclass NavStack {\n    /**\n     * @param screens the screens in the stack, the first element in the array will be taken as the first screen\n     * @param options the stack options, provided to the stack (https://reactnavigation.org/docs/stack-navigator)\n     */\n    constructor(public readonly options?: object) {}\n\n    public readonly screens: NavScreen[] = [];\n\n    public addScreen(screen: NavScreen): NavStack {\n        this.screens.push(screen);\n        return this;\n    }\n\n    public addNewScreen(name: string | null, id: string, component: React.FC, options?: object): NavStack {\n        let screen = new NavScreen(name, id, component, options);\n        this.addScreen(screen);\n        return this;\n    }\n}\n\nexport default NavStack;\n","import React, { createContext, useEffect, useMemo, useState } from \"react\";\nimport Environment from \"../../state/environment/Environment\";\nimport StateManager from \"../../state/publishers/StateManager\";\n\nexport const ColorSchemeContext = createContext(Environment.instance.getDeviceColorScheme());\n\ninterface Props {\n    // Components to be embedded\n    children: any;\n}\n\nexport const ColorSchemeProvider: React.FC<Props> = ({ children }) => {\n    const [colorScheme, setColorScheme] = useState(Environment.instance.getDeviceColorScheme());\n    const value = useMemo(() => ({ colorScheme, setColorScheme }), [colorScheme]);\n\n    useEffect(() => {\n        const unsubscribe = StateManager.colorScheme.subscribe(() => {\n            setColorScheme(StateManager.colorScheme.read());\n        });\n\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    return <ColorSchemeContext.Provider value={value.colorScheme}>{children}</ColorSchemeContext.Provider>;\n};\n","import { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useCallback } from \"react\";\nimport { View } from \"react-native\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { LinearNavigator } from \"./src/components/navigation/LinearNavigator\";\nimport { MainNavStack } from \"./src/components/navigation/MainNavStack\";\nimport { ColorSchemeProvider } from \"./src/components/providers/ColorProvider\";\nimport { ResFont } from \"./src/components/styling/typography/ResFont\";\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n    const [fontsLoaded] = useFonts({\n        [ResFont.poppinsMedium]: require(\"./assets/fonts/Poppins-Medium.ttf\"),\n        [ResFont.poppinsSemiBold]: require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n        [ResFont.poppinsBold]: require(\"./assets/fonts/Poppins-Bold.ttf\"),\n        [ResFont.poppinsMediumItalic]: require(\"./assets/fonts/Poppins-MediumItalic.ttf\"),\n        [ResFont.poppinsSemiBoldItalic]: require(\"./assets/fonts/Poppins-SemiBoldItalic.ttf\"),\n        [ResFont.poppinsBoldItalic]: require(\"./assets/fonts/Poppins-BoldItalic.ttf\"),\n        [ResFont.circularMedium]: require(\"./assets/fonts/CircularStd-Medium.otf\"),\n        [ResFont.circularBold]: require(\"./assets/fonts/CircularStd-Bold.otf\"),\n        [ResFont.circularBlack]: require(\"./assets/fonts/CircularStd-Black.otf\"),\n        [ResFont.circularMediumItalic]: require(\"./assets/fonts/CircularStd-MediumItalic.otf\"),\n        [ResFont.circularBoldItalic]: require(\"./assets/fonts/CircularStd-BoldItalic.otf\"),\n        [ResFont.circularBlackItalic]: require(\"./assets/fonts/CircularStd-BlackItalic.otf\"),\n        [ResFont.plexMonoMedium]: require(\"./assets/fonts/IBMPlexMono-Medium.ttf\"),\n        [ResFont.plexMonoSemiBold]: require(\"./assets/fonts/IBMPlexMono-SemiBold.ttf\"),\n        [ResFont.plexMonoBold]: require(\"./assets/fonts/IBMPlexMono-Bold.ttf\"),\n        [ResFont.plexMonoMediumItalic]: require(\"./assets/fonts/IBMPlexMono-MediumItalic.ttf\"),\n        [ResFont.plexMonoSemiBoldItalic]: require(\"./assets/fonts/IBMPlexMono-SemiBoldItalic.ttf\"),\n        [ResFont.plexMonoBoldItalic]: require(\"./assets/fonts/IBMPlexMono-BoldItalic.ttf\"),\n        [ResFont.gilroyExtraBold]: require(\"./assets/fonts/Gilroy-ExtraBold.otf\"),\n    });\n\n    const onLayoutRootView = useCallback(async () => {\n        if (fontsLoaded) {\n            await SplashScreen.hideAsync();\n        }\n    }, [fontsLoaded]);\n\n    if (!fontsLoaded) {\n        return null;\n    }\n\n    return (\n        <SafeAreaProvider>\n            <NavigationContainer>\n                <ColorSchemeProvider>\n                    <View onLayout={onLayoutRootView} style={{ flex: 1 }}>\n                        <LinearNavigator stack={MainNavStack} />\n                    </View>\n                </ColorSchemeProvider>\n            </NavigationContainer>\n        </SafeAreaProvider>\n    );\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/Resume/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [813], () => (__webpack_require__(9484)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","AssertionError","_Error","_inherits","_super","_createSuper","message","_classCallCheck","call","_createClass","_wrapNativeSuper","assert","condition","UnreachableCaseError","val","JSON","stringify","ColorScheme","toString","scheme","dark","light","ResColor","lightMode","darkMode","hexRegex","setDarkMode","test","this","key","value","colorScheme","StateManager","read","hex","getColor","slice","length","parseInt","ResColors","get","OS","os","ios","android","windows","macos","web","other","ResScreenOrientation","ScreenType","screenType","mobile","large","Environment","Appearance","getColorScheme","Platform","getOS","isPad","dimensions","getScreenDimensions","Landscape","Potrait","getScreenWidth","Dimensions","width","height","instance","ResValuePublisher","initialState","createSlice","name","reducers","publishAction","state","newValue","payload","publisher","configureStore","reducer","callback","subscribe","dispatch","actions","getState","ActiveSection","publish","getDeviceColorScheme","backgroundColor","background","activeSection","none","contentWidth","undefined","setup","ResFont","ResFontWeight","ResFontFamilyConfig","regular","semiBold","bold","black","italic","semiBoldItalic","boldItalic","blackItalic","weight","isItalic","ResFontFamily","getConfig","family","poppins","poppinsMedium","poppinsSemiBold","poppinsBold","poppinsMediumItalic","poppinsSemiBoldItalic","poppinsBoldItalic","circular","circularMedium","circularBold","circularBlack","circularMediumItalic","circularBoldItalic","circularBlackItalic","plexMono","plexMonoMedium","plexMonoSemiBold","plexMonoBold","plexMonoMediumItalic","plexMonoSemiBoldItalic","plexMonoBoldItalic","gilroy","gilroyExtraBold","_ref","children","typography","_ref$verticalWrap","verticalWrap","_ref$wide","wide","numberOfLines","style","lineHeightMultiplier","fontFamily","_jsx","Text","alignSelf","getStylesheet","lineHeight","size","ResTypographyConfig","color","arguments","underlined","linedOut","kerning","resColor","getFont","_this$resColor","result","trimStart","underline","lineOut","StyleSheet","create","font","fontSize","textDecorationLine","lineStyle","letterSpacing","ResTypography","textDark","textSemiDark","textLightPersistent","textLight","title","canGoBack","navigation","_React$useState","React","_React$useState2","_slicedToArray","setBackgroundColor","useEffect","unsubscribe","SafeAreaView","edges","_jsxs","View","flexDirection","justifyContent","alignItems","paddingHorizontal","paddingTop","TouchableOpacity","onPress","goBack","paddingRight","Icon","header","marginLeft","ResText","LinearNavigator","stack","Stack","createStackNavigator","globalOptions","_useState","useState","_useState2","refresh","setRefresh","Navigator","screens","screen","index","Screen","component","options","_ref2","_objectSpread","cardStyle","_Fragment","NavHeader","VStack","_ref$spacing","spacing","_ref$horizontalSpacin","horizontalSpacing","onLayout","styles","container","columnGap","rowGap","flexWrap","propTypes","PropTypes","isRequired","defaultProps","ResDimensions","screenPadding","cardPadding","fillRadius","mainScreenSpacing","pageContentSpacing","cardColumnSpacing","bodyParagraphSpacing","tagSpacing","iconButtonSize","iconButtonSpacing","padding","event","nativeEvent","layout","label","_ref$icon","icon","_ref$disabled","disabled","paddingVertical","borderRadius","opacity","url","linkTypography","withWeight","withUnderline","handlePress","Linking","openURL","HStack","_ref$verticalSpacing","verticalSpacing","_ref$onPress","FlatContainer","fillBackgroundLight","screenIsPortrait","setScreenIsPortrait","_useState3","_useState4","componentWidth","setComponentWidth","addEventListener","newDimensions","columnCount","gap","downloadAcademicTranscript","_asyncToGenerator","fileUrl","require","link","document","createElement","href","download","click","error","console","apply","downloadHonoursListInclusions","_ref3","downloadLettersOfCommendation","_ref4","BasicCard","body","ResHyperlink","ResSmallButton","buttonSmall","withColor","accent","paddingBottom","forceExit","_navigation","addListener","subscription","_navigation2","remove","scrollRef","useRef","useFocusEffect","current","scrollIntoView","behavior","ref","ContentContainer","Education","ExperiencePeriod","experiences","Download","fileName","Link","shownURL","Experience","image","section","projectType","duration","description","links","files","tags","Experiences","ExperiencePeriods","experience","added","push","sort","a","b","aIsString","bIsString","ResImageScale","_ref$width","_ref$height","_ref$scale","scale","setSize","resizeMode","setResizeMode","_useState5","_useState6","imageSize","setImageSize","imagePath","Image","getSize","log","scaleToFill","scaleToFit","scaleToFillCrop","source","aspectRatio","flex","ResImage","borderWidth","borderColor","subscript","subscriptText","file","tag","ResChip","chipBackground","chip","sectionTitle","flexGrow","period","YearHeader","ExperienceCard","ExperienceSection","_ref$iconColor","iconColor","_ref$fileName","_ref$onlyIcon","onlyIcon","tintColor","ResIcon","_objectDestructuringEmpty","pageTitle","ResIconButton","shadow","shadowColor","shadowOffset","shadowOpacity","shadowRadius","radius","setActiveSection","selectedTypography","button","unselectedTypography","ResButton","toPublish","maxWidth","paddingLeft","position","top","subscriptLabel","textAlign","splash","standoutBody","ResIconButtonLabelled","gitHub","behance","linkedIn","SplashIntro","SplashButtonMobile","skills","education","horizontalButtonSpacing","Math","cos","PI","buttonRadius","SplashButton","navigateToSection","navigate","scrollIntoContent","window","history","scrollRestoration","useColorScheme","alignContent","Header","Splash","marginTop","marginBottom","Skills","renderPageContent","NavScreen","MainNavStack","NavStack","addScreen","addNewScreen","MainScreen","EducationScreen","ExperienceScreen","SkillsScreen","ColorSchemeContext","createContext","ColorSchemeProvider","setColorScheme","useMemo","Provider","App","_useFonts3","_useFonts","useFonts","_defineProperty","fontsLoaded","onLayoutRootView","useCallback","SplashScreen","SafeAreaProvider","NavigationContainer","__webpack_module_cache__","moduleId","cachedModule","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","n","getter","__esModule","d","definition","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}